{"version":3,"file":"mx-bank-transaction-parser.umd.js","sources":["../src/models/transaction.js","../src/parsers/afirme-parser.js","../src/parsers/banbajio-parser.js","../node_modules/csv-parse/lib/api/CsvError.js","../node_modules/csv-parse/lib/utils/is_object.js","../node_modules/csv-parse/lib/api/normalize_columns_array.js","../node_modules/csv-parse/lib/utils/ResizeableBuffer.js","../node_modules/csv-parse/lib/api/init_state.js","../node_modules/csv-parse/lib/utils/underscore.js","../node_modules/csv-parse/lib/api/normalize_options.js","../node_modules/csv-parse/lib/api/index.js","../node_modules/csv-parse/lib/sync.js","../src/parsers/banorte-parser.js","../src/parsers/bbva-parser.js","../src/parsers/scotiabank-parser.js","../src/index.js"],"sourcesContent":["/**\n * Represents a bank transaction.\n */\nexport class Transaction {\n    /**\n     * Creates a new Transaction instance.\n     *\n     * @param {Object} params\n     * @param {string} params.date - Transaction date string, format depends on bank\n     * @param {string} params.type - Transaction type (e.g. 'Cargo', 'Abono')\n     * @param {number} params.amount - Transaction amount\n     * @param {number} params.balance - Account balance after transaction\n     * @param {string} params.description - Description or concept of transaction\n     * @param {string} params.reference - Reference or tracking number\n     * @param {string} params.bank - Bank involved in transaction\n     * @param {string|null} [params.accountNumber] - Origin/destination account number, if any\n     * @param {string|null} [params.beneficiary] - Beneficiary of the transaction, if any\n     * @param {string|null} [params.trackingKey] - Internal tracking key, if any\n     * @param {string} [params.extra] - Raw original line or extra info\n     */\n    constructor({\n                    date,\n                    type,\n                    amount,\n                    balance,\n                    description,\n                    reference,\n                    bank,\n                    accountNumber = null,\n                    beneficiary = null,\n                    trackingKey = null,\n                    extra = '',\n                }) {\n        this.date = date;\n        this.type = type;\n        this.amount = amount;\n        this.balance = balance;\n        this.description = description;\n        this.reference = reference;\n        this.bank = bank;\n        this.accountNumber = accountNumber;\n        this.beneficiary = beneficiary;\n        this.trackingKey = trackingKey;\n        this.extra = extra;\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class AfirmeParser {\n    /**\n     * Parses the entire CSV file content into an array of Transactions.\n     *\n     * @param {string} fileContent - The full CSV file content as a string.\n     * @returns {Transaction[]} Array of parsed transactions.\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split(/\\r?\\n/)\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n\n        return lines\n            .map(line => this.parseLine(line))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single CSV line into a Transaction instance.\n     *\n     * @param {string} line - A CSV line representing a transaction.\n     * @returns {Transaction|null} Parsed Transaction or null if invalid.\n     */\n    parseLine(line) {\n        const parts = this._splitCsvLine(line);\n        if (parts.length < 7) return null;\n\n        const description = parts[0];\n        const date = this._formatDate(parts[1]);\n        const reference = parts[2];\n        const debit = parseFloat(parts[3]) || 0;\n        const credit = parseFloat(parts[4]) || 0;\n        const balance = parseFloat(parts[5]) || 0;\n        const account = parts[6];\n        const amount = credit !== 0 ? credit : -debit;\n\n        return new Transaction({\n            date,\n            type: credit !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference,\n            account,\n            description,\n            bank: 'Afirme',\n            raw: line,\n        });\n    }\n\n    /**\n     * Converts a date string in DD/MM/YY format to ISO YYYY-MM-DD format.\n     *\n     * @param {string} input - Date string in DD/MM/YY format.\n     * @returns {string} Date string in YYYY-MM-DD format.\n     */\n    _formatDate(input) {\n        const [day, month, year] = input.split('/');\n        const fullYear = Number(year) > 70 ? `19${year}` : `20${year}`;\n        return `${fullYear}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    }\n\n    /**\n     * Splits a CSV line by commas into an array of fields.\n     * Does not handle quoted commas.\n     *\n     * @param {string} line - A CSV line string.\n     * @returns {string[]} Array of CSV fields.\n     */\n    _splitCsvLine(line) {\n        return line.split(',');\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class BanBajioParser {\n    /**\n     * Parses the entire BanBajio CSV file content.\n     *\n     * @param {string} fileContent - Full CSV content as string.\n     * @returns {Transaction[]} Array of transactions.\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split(/\\r?\\n/)\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n\n        // Skip the first two lines (metadata + headers)\n        const dataLines = lines.slice(2);\n\n        return dataLines\n            .map(line => this.parseLine(line))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single CSV line of BanBajio transaction.\n     *\n     * @param {string} line - CSV line string.\n     * @returns {Transaction|null}\n     */\n    parseLine(line) {\n        // Split by comma, but beware description may contain commas or pipes.\n        // Let's split into exactly 8 fields by limit split:\n        // Index, Date, Time, Receipt, Description, Charges, Credits, Balance\n\n        // A naive split on comma might break Description if it contains commas.\n        // But from sample, the first 4 fields are fixed-length,\n        // So we can split first 5 commas to get 6 fields, then last 2 fields.\n\n        const parts = this._splitCsvWithLimit(line, 7);\n        if (parts.length < 8) return null;\n\n        const [\n            index,\n            dateStr,\n            timeStr,\n            receipt,\n            description,\n            chargesStr,\n            creditsStr,\n            balanceStr,\n        ] = parts;\n\n        const date = this._formatDateTime(dateStr, timeStr);\n        const charges = this._parseMoney(chargesStr);\n        const credits = this._parseMoney(creditsStr);\n        const balance = this._parseMoney(balanceStr);\n        const amount = credits !== 0 ? credits : -charges;\n\n        return new Transaction({\n            date,\n            type: credits !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference: receipt,\n            account: null, // No account in sample\n            description,\n            bank: 'BanBajio',\n            raw: line,\n        });\n    }\n\n    /**\n     * Splits a CSV line string into parts with a maximum number of splits,\n     * so description with commas won't break field alignment.\n     *\n     * @param {string} line\n     * @param {number} limit - Max splits (max fields - 1)\n     * @returns {string[]}\n     */\n    _splitCsvWithLimit(line, limit) {\n        const parts = [];\n        let lastIndex = 0;\n        let count = 0;\n\n        for (let i = 0; i < line.length; i++) {\n            if (line[i] === ',' && count < limit) {\n                parts.push(line.substring(lastIndex, i));\n                lastIndex = i + 1;\n                count++;\n            }\n        }\n        parts.push(line.substring(lastIndex));\n        return parts;\n    }\n\n    /**\n     * Parses money strings like \"58928.00\" into number.\n     *\n     * @param {string} str\n     * @returns {number}\n     */\n    _parseMoney(str) {\n        if (!str) return 0;\n        // Remove commas and parse float\n        return parseFloat(str.replace(/,/g, '')) || 0;\n    }\n\n    /**\n     * Converts date and time strings into ISO 8601 date-time string.\n     *\n     * @param {string} dateStr - e.g. \"28-Nov-2024\"\n     * @param {string} timeStr - e.g. \"09:33:24\"\n     * @returns {string} ISO date-time string \"YYYY-MM-DDTHH:mm:ss\"\n     */\n    _formatDateTime(dateStr, timeStr) {\n        // Convert DD-MMM-YYYY (like 28-Nov-2024) to YYYY-MM-DD\n        const months = {\n            Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06',\n            Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12',\n        };\n        const [day, mon, year] = dateStr.split('-');\n        const monthNum = months[mon] || '01';\n\n        // Combine into ISO 8601\n        return `${year}-${monthNum}-${day.padStart(2, '0')}T${timeStr}`;\n    }\n}\n","class CsvError extends Error {\n  constructor(code, message, options, ...contexts) {\n    if (Array.isArray(message)) message = message.join(\" \").trim();\n    super(message);\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(this, CsvError);\n    }\n    this.code = code;\n    for (const context of contexts) {\n      for (const key in context) {\n        const value = context[key];\n        this[key] = Buffer.isBuffer(value)\n          ? value.toString(options.encoding)\n          : value == null\n            ? value\n            : JSON.parse(JSON.stringify(value));\n      }\n    }\n  }\n}\n\nexport { CsvError };\n","const is_object = function (obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n};\n\nexport { is_object };\n","import { CsvError } from \"./CsvError.js\";\nimport { is_object } from \"../utils/is_object.js\";\n\nconst normalize_columns_array = function (columns) {\n  const normalizedColumns = [];\n  for (let i = 0, l = columns.length; i < l; i++) {\n    const column = columns[i];\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = { disabled: true };\n    } else if (typeof column === \"string\") {\n      normalizedColumns[i] = { name: column };\n    } else if (is_object(column)) {\n      if (typeof column.name !== \"string\") {\n        throw new CsvError(\"CSV_OPTION_COLUMNS_MISSING_NAME\", [\n          \"Option columns missing name:\",\n          `property \"name\" is required at position ${i}`,\n          \"when column is an object literal\",\n        ]);\n      }\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError(\"CSV_INVALID_COLUMN_DEFINITION\", [\n        \"Invalid column definition:\",\n        \"expect a string or a literal object,\",\n        `got ${JSON.stringify(column)} at position ${i}`,\n      ]);\n    }\n  }\n  return normalizedColumns;\n};\n\nexport { normalize_columns_array };\n","class ResizeableBuffer {\n  constructor(size = 100) {\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n      if (length >= this.size) {\n        this.resize();\n        if (length >= this.size) {\n          throw Error(\"INVALID_BUFFER_STATE\");\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n      if (length === this.size) {\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n  append(val) {\n    const length = this.length++;\n    if (length === this.size) {\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON() {\n    return this.toString(\"utf8\");\n  }\n  reset() {\n    this.length = 0;\n  }\n}\n\nexport default ResizeableBuffer;\n","import ResizeableBuffer from \"../utils/ResizeableBuffer.js\";\n\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst np = 12;\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\nconst space = 32;\nconst tab = 9;\n\nconst init_state = function (options) {\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote:\n      Buffer.isBuffer(options.escape) &&\n      Buffer.isBuffer(options.quote) &&\n      Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns)\n      ? options.columns.length\n      : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max(\n      // Skip if the remaining buffer smaller than comment\n      options.comment !== null ? options.comment.length : 0,\n      // Skip if the remaining buffer can be delimiter\n      ...options.delimiter.map((delimiter) => delimiter.length),\n      // Skip if the remaining buffer can be escape sequence\n      options.quote !== null ? options.quote.length : 0,\n    ),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength:\n      options.record_delimiter.length === 0\n        ? 0\n        : Math.max(...options.record_delimiter.map((v) => v.length)),\n    trimChars: [\n      Buffer.from(\" \", options.encoding)[0],\n      Buffer.from(\"\\t\", options.encoding)[0],\n    ],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [\n      Buffer.from(Buffer.from([cr], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([nl], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([np], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([space], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([tab], \"utf8\").toString(), options.encoding),\n    ],\n  };\n};\n\nexport { init_state };\n","const underscore = function (str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return \"_\" + match.toLowerCase();\n  });\n};\n\nexport { underscore };\n","import { normalize_columns_array } from \"./normalize_columns_array.js\";\nimport { CsvError } from \"./CsvError.js\";\nimport { underscore } from \"../utils/underscore.js\";\n\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if (options.encoding === undefined || options.encoding === true) {\n    options.encoding = \"utf8\";\n  } else if (options.encoding === null || options.encoding === false) {\n    options.encoding = null;\n  } else if (\n    typeof options.encoding !== \"string\" &&\n    options.encoding !== null\n  ) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_ENCODING\",\n      [\n        \"Invalid option encoding:\",\n        \"encoding must be a string or null to return a buffer,\",\n        `got ${JSON.stringify(options.encoding)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `bom`\n  if (\n    options.bom === undefined ||\n    options.bom === null ||\n    options.bom === false\n  ) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_BOM\",\n      [\n        \"Invalid option bom:\",\n        \"bom must be true,\",\n        `got ${JSON.stringify(options.bom)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if (\n    options.cast === undefined ||\n    options.cast === null ||\n    options.cast === false ||\n    options.cast === \"\"\n  ) {\n    options.cast = undefined;\n  } else if (typeof options.cast === \"function\") {\n    options.cast_function = options.cast;\n    options.cast = true;\n  } else if (options.cast !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_CAST\",\n      [\n        \"Invalid option cast:\",\n        \"cast must be true or a function,\",\n        `got ${JSON.stringify(options.cast)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `cast_date`\n  if (\n    options.cast_date === undefined ||\n    options.cast_date === null ||\n    options.cast_date === false ||\n    options.cast_date === \"\"\n  ) {\n    options.cast_date = false;\n  } else if (options.cast_date === true) {\n    options.cast_date = function (value) {\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  } else if (typeof options.cast_date !== \"function\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_CAST_DATE\",\n      [\n        \"Invalid option cast_date:\",\n        \"cast_date must be true or a function,\",\n        `got ${JSON.stringify(options.cast_date)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = undefined;\n  if (options.columns === true) {\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  } else if (typeof options.columns === \"function\") {\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  } else if (Array.isArray(options.columns)) {\n    options.columns = normalize_columns_array(options.columns);\n  } else if (\n    options.columns === undefined ||\n    options.columns === null ||\n    options.columns === false\n  ) {\n    options.columns = false;\n  } else {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_COLUMNS\",\n      [\n        \"Invalid option columns:\",\n        \"expect an array, a function or true,\",\n        `got ${JSON.stringify(options.columns)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `group_columns_by_name`\n  if (\n    options.group_columns_by_name === undefined ||\n    options.group_columns_by_name === null ||\n    options.group_columns_by_name === false\n  ) {\n    options.group_columns_by_name = false;\n  } else if (options.group_columns_by_name !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\",\n      [\n        \"Invalid option group_columns_by_name:\",\n        \"expect an boolean,\",\n        `got ${JSON.stringify(options.group_columns_by_name)}`,\n      ],\n      options,\n    );\n  } else if (options.columns === false) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\",\n      [\n        \"Invalid option group_columns_by_name:\",\n        \"the `columns` mode must be activated.\",\n      ],\n      options,\n    );\n  }\n  // Normalize option `comment`\n  if (\n    options.comment === undefined ||\n    options.comment === null ||\n    options.comment === false ||\n    options.comment === \"\"\n  ) {\n    options.comment = null;\n  } else {\n    if (typeof options.comment === \"string\") {\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.comment)) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_COMMENT\",\n        [\n          \"Invalid option comment:\",\n          \"comment must be a buffer or a string,\",\n          `got ${JSON.stringify(options.comment)}`,\n        ],\n        options,\n      );\n    }\n  }\n  // Normalize option `comment_no_infix`\n  if (\n    options.comment_no_infix === undefined ||\n    options.comment_no_infix === null ||\n    options.comment_no_infix === false\n  ) {\n    options.comment_no_infix = false;\n  } else if (options.comment_no_infix !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_COMMENT\",\n      [\n        \"Invalid option comment_no_infix:\",\n        \"value must be a boolean,\",\n        `got ${JSON.stringify(options.comment_no_infix)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if (!Array.isArray(options.delimiter))\n    options.delimiter = [options.delimiter];\n  if (options.delimiter.length === 0) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_DELIMITER\",\n      [\n        \"Invalid option delimiter:\",\n        \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n        `got ${delimiter_json}`,\n      ],\n      options,\n    );\n  }\n  options.delimiter = options.delimiter.map(function (delimiter) {\n    if (delimiter === undefined || delimiter === null || delimiter === false) {\n      return Buffer.from(\",\", options.encoding);\n    }\n    if (typeof delimiter === \"string\") {\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_DELIMITER\",\n        [\n          \"Invalid option delimiter:\",\n          \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n          `got ${delimiter_json}`,\n        ],\n        options,\n      );\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === true) {\n    options.escape = Buffer.from('\"', options.encoding);\n  } else if (typeof options.escape === \"string\") {\n    options.escape = Buffer.from(options.escape, options.encoding);\n  } else if (options.escape === null || options.escape === false) {\n    options.escape = null;\n  }\n  if (options.escape !== null) {\n    if (!Buffer.isBuffer(options.escape)) {\n      throw new Error(\n        `Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`,\n      );\n    }\n  }\n  // Normalize option `from`\n  if (options.from === undefined || options.from === null) {\n    options.from = 1;\n  } else {\n    if (typeof options.from === \"string\" && /\\d+/.test(options.from)) {\n      options.from = parseInt(options.from);\n    }\n    if (Number.isInteger(options.from)) {\n      if (options.from < 0) {\n        throw new Error(\n          `Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`,\n      );\n    }\n  }\n  // Normalize option `from_line`\n  if (options.from_line === undefined || options.from_line === null) {\n    options.from_line = 1;\n  } else {\n    if (\n      typeof options.from_line === \"string\" &&\n      /\\d+/.test(options.from_line)\n    ) {\n      options.from_line = parseInt(options.from_line);\n    }\n    if (Number.isInteger(options.from_line)) {\n      if (options.from_line <= 0) {\n        throw new Error(\n          `Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`,\n      );\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if (\n    options.ignore_last_delimiters === undefined ||\n    options.ignore_last_delimiters === null\n  ) {\n    options.ignore_last_delimiters = false;\n  } else if (typeof options.ignore_last_delimiters === \"number\") {\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if (options.ignore_last_delimiters === 0) {\n      options.ignore_last_delimiters = false;\n    }\n  } else if (typeof options.ignore_last_delimiters !== \"boolean\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS\",\n      [\n        \"Invalid option `ignore_last_delimiters`:\",\n        \"the value must be a boolean value or an integer,\",\n        `got ${JSON.stringify(options.ignore_last_delimiters)}`,\n      ],\n      options,\n    );\n  }\n  if (options.ignore_last_delimiters === true && options.columns === false) {\n    throw new CsvError(\n      \"CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS\",\n      [\n        \"The option `ignore_last_delimiters`\",\n        \"requires the activation of the `columns` option\",\n      ],\n      options,\n    );\n  }\n  // Normalize option `info`\n  if (\n    options.info === undefined ||\n    options.info === null ||\n    options.info === false\n  ) {\n    options.info = false;\n  } else if (options.info !== true) {\n    throw new Error(\n      `Invalid Option: info must be true, got ${JSON.stringify(options.info)}`,\n    );\n  }\n  // Normalize option `max_record_size`\n  if (\n    options.max_record_size === undefined ||\n    options.max_record_size === null ||\n    options.max_record_size === false\n  ) {\n    options.max_record_size = 0;\n  } else if (\n    Number.isInteger(options.max_record_size) &&\n    options.max_record_size >= 0\n  ) {\n    // Great, nothing to do\n  } else if (\n    typeof options.max_record_size === \"string\" &&\n    /\\d+/.test(options.max_record_size)\n  ) {\n    options.max_record_size = parseInt(options.max_record_size);\n  } else {\n    throw new Error(\n      `Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`,\n    );\n  }\n  // Normalize option `objname`\n  if (\n    options.objname === undefined ||\n    options.objname === null ||\n    options.objname === false\n  ) {\n    options.objname = undefined;\n  } else if (Buffer.isBuffer(options.objname)) {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if (options.encoding === null) {\n      // Don't call `toString`, leave objname as a buffer\n    } else {\n      options.objname = options.objname.toString(options.encoding);\n    }\n  } else if (typeof options.objname === \"string\") {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  } else if (typeof options.objname === \"number\") {\n    // if(options.objname.length === 0){\n    //   throw new Error(`Invalid Option: objname must be a non empty string`);\n    // }\n    // Great, nothing to do\n  } else {\n    throw new Error(\n      `Invalid Option: objname must be a string or a buffer, got ${options.objname}`,\n    );\n  }\n  if (options.objname !== undefined) {\n    if (typeof options.objname === \"number\") {\n      if (options.columns !== false) {\n        throw Error(\n          \"Invalid Option: objname index cannot be combined with columns or be defined as a field\",\n        );\n      }\n    } else {\n      // A string or a buffer\n      if (options.columns === false) {\n        throw Error(\n          \"Invalid Option: objname field must be combined with columns or be defined as an index\",\n        );\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if (options.on_record === undefined || options.on_record === null) {\n    options.on_record = undefined;\n  } else if (typeof options.on_record !== \"function\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_ON_RECORD\",\n      [\n        \"Invalid option `on_record`:\",\n        \"expect a function,\",\n        `got ${JSON.stringify(options.on_record)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `on_skip`\n  // options.on_skip ??= (err, chunk) => {\n  //   this.emit('skip', err, chunk);\n  // };\n  if (\n    options.on_skip !== undefined &&\n    options.on_skip !== null &&\n    typeof options.on_skip !== \"function\"\n  ) {\n    throw new Error(\n      `Invalid Option: on_skip must be a function, got ${JSON.stringify(options.on_skip)}`,\n    );\n  }\n  // Normalize option `quote`\n  if (\n    options.quote === null ||\n    options.quote === false ||\n    options.quote === \"\"\n  ) {\n    options.quote = null;\n  } else {\n    if (options.quote === undefined || options.quote === true) {\n      options.quote = Buffer.from('\"', options.encoding);\n    } else if (typeof options.quote === \"string\") {\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.quote)) {\n      throw new Error(\n        `Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`,\n      );\n    }\n  }\n  // Normalize option `raw`\n  if (\n    options.raw === undefined ||\n    options.raw === null ||\n    options.raw === false\n  ) {\n    options.raw = false;\n  } else if (options.raw !== true) {\n    throw new Error(\n      `Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`,\n    );\n  }\n  // Normalize option `record_delimiter`\n  if (options.record_delimiter === undefined) {\n    options.record_delimiter = [];\n  } else if (\n    typeof options.record_delimiter === \"string\" ||\n    Buffer.isBuffer(options.record_delimiter)\n  ) {\n    if (options.record_delimiter.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a non empty string or buffer,\",\n          `got ${JSON.stringify(options.record_delimiter)}`,\n        ],\n        options,\n      );\n    }\n    options.record_delimiter = [options.record_delimiter];\n  } else if (!Array.isArray(options.record_delimiter)) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n      [\n        \"Invalid option `record_delimiter`:\",\n        \"value must be a string, a buffer or array of string|buffer,\",\n        `got ${JSON.stringify(options.record_delimiter)}`,\n      ],\n      options,\n    );\n  }\n  options.record_delimiter = options.record_delimiter.map(function (rd, i) {\n    if (typeof rd !== \"string\" && !Buffer.isBuffer(rd)) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a string, a buffer or array of string|buffer\",\n          `at index ${i},`,\n          `got ${JSON.stringify(rd)}`,\n        ],\n        options,\n      );\n    } else if (rd.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a non empty string or buffer\",\n          `at index ${i},`,\n          `got ${JSON.stringify(rd)}`,\n        ],\n        options,\n      );\n    }\n    if (typeof rd === \"string\") {\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if (typeof options.relax_column_count === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count === undefined ||\n    options.relax_column_count === null\n  ) {\n    options.relax_column_count = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`,\n    );\n  }\n  if (typeof options.relax_column_count_less === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count_less === undefined ||\n    options.relax_column_count_less === null\n  ) {\n    options.relax_column_count_less = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`,\n    );\n  }\n  if (typeof options.relax_column_count_more === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count_more === undefined ||\n    options.relax_column_count_more === null\n  ) {\n    options.relax_column_count_more = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`,\n    );\n  }\n  // Normalize option `relax_quotes`\n  if (typeof options.relax_quotes === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_quotes === undefined ||\n    options.relax_quotes === null\n  ) {\n    options.relax_quotes = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`,\n    );\n  }\n  // Normalize option `skip_empty_lines`\n  if (typeof options.skip_empty_lines === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_empty_lines === undefined ||\n    options.skip_empty_lines === null\n  ) {\n    options.skip_empty_lines = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`,\n    );\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if (typeof options.skip_records_with_empty_values === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_records_with_empty_values === undefined ||\n    options.skip_records_with_empty_values === null\n  ) {\n    options.skip_records_with_empty_values = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`,\n    );\n  }\n  // Normalize option `skip_records_with_error`\n  if (typeof options.skip_records_with_error === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_records_with_error === undefined ||\n    options.skip_records_with_error === null\n  ) {\n    options.skip_records_with_error = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`,\n    );\n  }\n  // Normalize option `rtrim`\n  if (\n    options.rtrim === undefined ||\n    options.rtrim === null ||\n    options.rtrim === false\n  ) {\n    options.rtrim = false;\n  } else if (options.rtrim !== true) {\n    throw new Error(\n      `Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`,\n    );\n  }\n  // Normalize option `ltrim`\n  if (\n    options.ltrim === undefined ||\n    options.ltrim === null ||\n    options.ltrim === false\n  ) {\n    options.ltrim = false;\n  } else if (options.ltrim !== true) {\n    throw new Error(\n      `Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`,\n    );\n  }\n  // Normalize option `trim`\n  if (\n    options.trim === undefined ||\n    options.trim === null ||\n    options.trim === false\n  ) {\n    options.trim = false;\n  } else if (options.trim !== true) {\n    throw new Error(\n      `Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`,\n    );\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if (options.trim === true && opts.ltrim !== false) {\n    options.ltrim = true;\n  } else if (options.ltrim !== true) {\n    options.ltrim = false;\n  }\n  if (options.trim === true && opts.rtrim !== false) {\n    options.rtrim = true;\n  } else if (options.rtrim !== true) {\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if (options.to === undefined || options.to === null) {\n    options.to = -1;\n  } else if (options.to !== -1) {\n    if (typeof options.to === \"string\" && /\\d+/.test(options.to)) {\n      options.to = parseInt(options.to);\n    }\n    if (Number.isInteger(options.to)) {\n      if (options.to <= 0) {\n        throw new Error(\n          `Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`,\n      );\n    }\n  }\n  // Normalize option `to_line`\n  if (options.to_line === undefined || options.to_line === null) {\n    options.to_line = -1;\n  } else if (options.to_line !== -1) {\n    if (typeof options.to_line === \"string\" && /\\d+/.test(options.to_line)) {\n      options.to_line = parseInt(options.to_line);\n    }\n    if (Number.isInteger(options.to_line)) {\n      if (options.to_line <= 0) {\n        throw new Error(\n          `Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`,\n      );\n    }\n  }\n  return options;\n};\n\nexport { normalize_options };\n","import { normalize_columns_array } from \"./normalize_columns_array.js\";\nimport { init_state } from \"./init_state.js\";\nimport { normalize_options } from \"./normalize_options.js\";\nimport { CsvError } from \"./CsvError.js\";\n\nconst isRecordEmpty = function (record) {\n  return record.every(\n    (field) =>\n      field == null || (field.toString && field.toString().trim() === \"\"),\n  );\n};\n\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\n\nconst boms = {\n  // Note, the following are equals:\n  // Buffer.from(\"\\ufeff\")\n  // Buffer.from([239, 187, 191])\n  // Buffer.from('EFBBBF', 'hex')\n  utf8: Buffer.from([239, 187, 191]),\n  // Note, the following are equals:\n  // Buffer.from \"\\ufeff\", 'utf16le\n  // Buffer.from([255, 254])\n  utf16le: Buffer.from([255, 254]),\n};\n\nconst transform = function (original_options = {}) {\n  const info = {\n    bytes: 0,\n    comment_lines: 0,\n    empty_lines: 0,\n    invalid_field_length: 0,\n    lines: 1,\n    records: 0,\n  };\n  const options = normalize_options(original_options);\n  return {\n    info: info,\n    original_options: original_options,\n    options: options,\n    state: init_state(options),\n    __needMoreData: function (i, bufLen, end) {\n      if (end) return false;\n      const { encoding, escape, quote } = this.options;\n      const { quoting, needMoreDataSize, recordDelimiterMaxLength } =\n        this.state;\n      const numOfCharLeft = bufLen - i - 1;\n      const requiredLength = Math.max(\n        needMoreDataSize,\n        // Skip if the remaining buffer smaller than record delimiter\n        // If \"record_delimiter\" is yet to be discovered:\n        // 1. It is equals to `[]` and \"recordDelimiterMaxLength\" equals `0`\n        // 2. We set the length to windows line ending in the current encoding\n        // Note, that encoding is known from user or bom discovery at that point\n        // recordDelimiterMaxLength,\n        recordDelimiterMaxLength === 0\n          ? Buffer.from(\"\\r\\n\", encoding).length\n          : recordDelimiterMaxLength,\n        // Skip if remaining buffer can be an escaped quote\n        quoting ? (escape === null ? 0 : escape.length) + quote.length : 0,\n        // Skip if remaining buffer can be record delimiter following the closing quote\n        quoting ? quote.length + recordDelimiterMaxLength : 0,\n      );\n      return numOfCharLeft < requiredLength;\n    },\n    // Central parser implementation\n    parse: function (nextBuf, end, push, close) {\n      const {\n        bom,\n        comment_no_infix,\n        encoding,\n        from_line,\n        ltrim,\n        max_record_size,\n        raw,\n        relax_quotes,\n        rtrim,\n        skip_empty_lines,\n        to,\n        to_line,\n      } = this.options;\n      let { comment, escape, quote, record_delimiter } = this.options;\n      const { bomSkipped, previousBuf, rawBuffer, escapeIsQuote } = this.state;\n      let buf;\n      if (previousBuf === undefined) {\n        if (nextBuf === undefined) {\n          // Handle empty string\n          close();\n          return;\n        } else {\n          buf = nextBuf;\n        }\n      } else if (previousBuf !== undefined && nextBuf === undefined) {\n        buf = previousBuf;\n      } else {\n        buf = Buffer.concat([previousBuf, nextBuf]);\n      }\n      // Handle UTF BOM\n      if (bomSkipped === false) {\n        if (bom === false) {\n          this.state.bomSkipped = true;\n        } else if (buf.length < 3) {\n          // No enough data\n          if (end === false) {\n            // Wait for more data\n            this.state.previousBuf = buf;\n            return;\n          }\n        } else {\n          for (const encoding in boms) {\n            if (boms[encoding].compare(buf, 0, boms[encoding].length) === 0) {\n              // Skip BOM\n              const bomLength = boms[encoding].length;\n              this.state.bufBytesStart += bomLength;\n              buf = buf.slice(bomLength);\n              // Renormalize original options with the new encoding\n              const options = normalize_options({\n                ...this.original_options,\n                encoding: encoding,\n              });\n              // Properties are merged with the existing options instance\n              for (const key in options) {\n                this.options[key] = options[key];\n              }\n              // Options will re-evaluate the Buffer with the new encoding\n              ({ comment, escape, quote } = this.options);\n              break;\n            }\n          }\n          this.state.bomSkipped = true;\n        }\n      }\n      const bufLen = buf.length;\n      let pos;\n      for (pos = 0; pos < bufLen; pos++) {\n        // Ensure we get enough space to look ahead\n        // There should be a way to move this out of the loop\n        if (this.__needMoreData(pos, bufLen, end)) {\n          break;\n        }\n        if (this.state.wasRowDelimiter === true) {\n          this.info.lines++;\n          this.state.wasRowDelimiter = false;\n        }\n        if (to_line !== -1 && this.info.lines > to_line) {\n          this.state.stop = true;\n          close();\n          return;\n        }\n        // Auto discovery of record_delimiter, unix, mac and windows supported\n        if (this.state.quoting === false && record_delimiter.length === 0) {\n          const record_delimiterCount = this.__autoDiscoverRecordDelimiter(\n            buf,\n            pos,\n          );\n          if (record_delimiterCount) {\n            record_delimiter = this.options.record_delimiter;\n          }\n        }\n        const chr = buf[pos];\n        if (raw === true) {\n          rawBuffer.append(chr);\n        }\n        if (\n          (chr === cr || chr === nl) &&\n          this.state.wasRowDelimiter === false\n        ) {\n          this.state.wasRowDelimiter = true;\n        }\n        // Previous char was a valid escape char\n        // treat the current char as a regular char\n        if (this.state.escaping === true) {\n          this.state.escaping = false;\n        } else {\n          // Escape is only active inside quoted fields\n          // We are quoting, the char is an escape chr and there is a chr to escape\n          // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if (\n            escape !== null &&\n            this.state.quoting === true &&\n            this.__isEscape(buf, pos, chr) &&\n            pos + escape.length < bufLen\n          ) {\n            if (escapeIsQuote) {\n              if (this.__isQuote(buf, pos + escape.length)) {\n                this.state.escaping = true;\n                pos += escape.length - 1;\n                continue;\n              }\n            } else {\n              this.state.escaping = true;\n              pos += escape.length - 1;\n              continue;\n            }\n          }\n          // Not currently escaping and chr is a quote\n          // TODO: need to compare bytes instead of single char\n          if (this.state.commenting === false && this.__isQuote(buf, pos)) {\n            if (this.state.quoting === true) {\n              const nextChr = buf[pos + quote.length];\n              const isNextChrTrimable =\n                rtrim && this.__isCharTrimable(buf, pos + quote.length);\n              const isNextChrComment =\n                comment !== null &&\n                this.__compareBytes(comment, buf, pos + quote.length, nextChr);\n              const isNextChrDelimiter = this.__isDelimiter(\n                buf,\n                pos + quote.length,\n                nextChr,\n              );\n              const isNextChrRecordDelimiter =\n                record_delimiter.length === 0\n                  ? this.__autoDiscoverRecordDelimiter(buf, pos + quote.length)\n                  : this.__isRecordDelimiter(nextChr, buf, pos + quote.length);\n              // Escape a quote\n              // Treat next char as a regular character\n              if (\n                escape !== null &&\n                this.__isEscape(buf, pos, chr) &&\n                this.__isQuote(buf, pos + escape.length)\n              ) {\n                pos += escape.length - 1;\n              } else if (\n                !nextChr ||\n                isNextChrDelimiter ||\n                isNextChrRecordDelimiter ||\n                isNextChrComment ||\n                isNextChrTrimable\n              ) {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                pos += quote.length - 1;\n                continue;\n              } else if (relax_quotes === false) {\n                const err = this.__error(\n                  new CsvError(\n                    \"CSV_INVALID_CLOSING_QUOTE\",\n                    [\n                      \"Invalid Closing Quote:\",\n                      `got \"${String.fromCharCode(nextChr)}\"`,\n                      `at line ${this.info.lines}`,\n                      \"instead of delimiter, record delimiter, trimable character\",\n                      \"(if activated) or comment\",\n                    ],\n                    this.options,\n                    this.__infoField(),\n                  ),\n                );\n                if (err !== undefined) return err;\n              } else {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                this.state.field.prepend(quote);\n                pos += quote.length - 1;\n              }\n            } else {\n              if (this.state.field.length !== 0) {\n                // In relax_quotes mode, treat opening quote preceded by chrs as regular\n                if (relax_quotes === false) {\n                  const info = this.__infoField();\n                  const bom = Object.keys(boms)\n                    .map((b) =>\n                      boms[b].equals(this.state.field.toString()) ? b : false,\n                    )\n                    .filter(Boolean)[0];\n                  const err = this.__error(\n                    new CsvError(\n                      \"INVALID_OPENING_QUOTE\",\n                      [\n                        \"Invalid Opening Quote:\",\n                        `a quote is found on field ${JSON.stringify(info.column)} at line ${info.lines}, value is ${JSON.stringify(this.state.field.toString(encoding))}`,\n                        bom ? `(${bom} bom)` : undefined,\n                      ],\n                      this.options,\n                      info,\n                      {\n                        field: this.state.field,\n                      },\n                    ),\n                  );\n                  if (err !== undefined) return err;\n                }\n              } else {\n                this.state.quoting = true;\n                pos += quote.length - 1;\n                continue;\n              }\n            }\n          }\n          if (this.state.quoting === false) {\n            const recordDelimiterLength = this.__isRecordDelimiter(\n              chr,\n              buf,\n              pos,\n            );\n            if (recordDelimiterLength !== 0) {\n              // Do not emit comments which take a full line\n              const skipCommentLine =\n                this.state.commenting &&\n                this.state.wasQuoting === false &&\n                this.state.record.length === 0 &&\n                this.state.field.length === 0;\n              if (skipCommentLine) {\n                this.info.comment_lines++;\n                // Skip full comment line\n              } else {\n                // Activate records emition if above from_line\n                if (\n                  this.state.enabled === false &&\n                  this.info.lines +\n                    (this.state.wasRowDelimiter === true ? 1 : 0) >=\n                    from_line\n                ) {\n                  this.state.enabled = true;\n                  this.__resetField();\n                  this.__resetRecord();\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n                // Skip if line is empty and skip_empty_lines activated\n                if (\n                  skip_empty_lines === true &&\n                  this.state.wasQuoting === false &&\n                  this.state.record.length === 0 &&\n                  this.state.field.length === 0\n                ) {\n                  this.info.empty_lines++;\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n                this.info.bytes = this.state.bufBytesStart + pos;\n                const errField = this.__onField();\n                if (errField !== undefined) return errField;\n                this.info.bytes =\n                  this.state.bufBytesStart + pos + recordDelimiterLength;\n                const errRecord = this.__onRecord(push);\n                if (errRecord !== undefined) return errRecord;\n                if (to !== -1 && this.info.records >= to) {\n                  this.state.stop = true;\n                  close();\n                  return;\n                }\n              }\n              this.state.commenting = false;\n              pos += recordDelimiterLength - 1;\n              continue;\n            }\n            if (this.state.commenting) {\n              continue;\n            }\n            if (\n              comment !== null &&\n              (comment_no_infix === false ||\n                (this.state.record.length === 0 &&\n                  this.state.field.length === 0))\n            ) {\n              const commentCount = this.__compareBytes(comment, buf, pos, chr);\n              if (commentCount !== 0) {\n                this.state.commenting = true;\n                continue;\n              }\n            }\n            const delimiterLength = this.__isDelimiter(buf, pos, chr);\n            if (delimiterLength !== 0) {\n              this.info.bytes = this.state.bufBytesStart + pos;\n              const errField = this.__onField();\n              if (errField !== undefined) return errField;\n              pos += delimiterLength - 1;\n              continue;\n            }\n          }\n        }\n        if (this.state.commenting === false) {\n          if (\n            max_record_size !== 0 &&\n            this.state.record_length + this.state.field.length > max_record_size\n          ) {\n            return this.__error(\n              new CsvError(\n                \"CSV_MAX_RECORD_SIZE\",\n                [\n                  \"Max Record Size:\",\n                  \"record exceed the maximum number of tolerated bytes\",\n                  `of ${max_record_size}`,\n                  `at line ${this.info.lines}`,\n                ],\n                this.options,\n                this.__infoField(),\n              ),\n            );\n          }\n        }\n        const lappend =\n          ltrim === false ||\n          this.state.quoting === true ||\n          this.state.field.length !== 0 ||\n          !this.__isCharTrimable(buf, pos);\n        // rtrim in non quoting is handle in __onField\n        const rappend = rtrim === false || this.state.wasQuoting === false;\n        if (lappend === true && rappend === true) {\n          this.state.field.append(chr);\n        } else if (rtrim === true && !this.__isCharTrimable(buf, pos)) {\n          return this.__error(\n            new CsvError(\n              \"CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE\",\n              [\n                \"Invalid Closing Quote:\",\n                \"found non trimable byte after quote\",\n                `at line ${this.info.lines}`,\n              ],\n              this.options,\n              this.__infoField(),\n            ),\n          );\n        } else {\n          if (lappend === false) {\n            pos += this.__isCharTrimable(buf, pos) - 1;\n          }\n          continue;\n        }\n      }\n      if (end === true) {\n        // Ensure we are not ending in a quoting state\n        if (this.state.quoting === true) {\n          const err = this.__error(\n            new CsvError(\n              \"CSV_QUOTE_NOT_CLOSED\",\n              [\n                \"Quote Not Closed:\",\n                `the parsing is finished with an opening quote at line ${this.info.lines}`,\n              ],\n              this.options,\n              this.__infoField(),\n            ),\n          );\n          if (err !== undefined) return err;\n        } else {\n          // Skip last line if it has no characters\n          if (\n            this.state.wasQuoting === true ||\n            this.state.record.length !== 0 ||\n            this.state.field.length !== 0\n          ) {\n            this.info.bytes = this.state.bufBytesStart + pos;\n            const errField = this.__onField();\n            if (errField !== undefined) return errField;\n            const errRecord = this.__onRecord(push);\n            if (errRecord !== undefined) return errRecord;\n          } else if (this.state.wasRowDelimiter === true) {\n            this.info.empty_lines++;\n          } else if (this.state.commenting === true) {\n            this.info.comment_lines++;\n          }\n        }\n      } else {\n        this.state.bufBytesStart += pos;\n        this.state.previousBuf = buf.slice(pos);\n      }\n      if (this.state.wasRowDelimiter === true) {\n        this.info.lines++;\n        this.state.wasRowDelimiter = false;\n      }\n    },\n    __onRecord: function (push) {\n      const {\n        columns,\n        group_columns_by_name,\n        encoding,\n        info,\n        from,\n        relax_column_count,\n        relax_column_count_less,\n        relax_column_count_more,\n        raw,\n        skip_records_with_empty_values,\n      } = this.options;\n      const { enabled, record } = this.state;\n      if (enabled === false) {\n        return this.__resetRecord();\n      }\n      // Convert the first line into column names\n      const recordLength = record.length;\n      if (columns === true) {\n        if (skip_records_with_empty_values === true && isRecordEmpty(record)) {\n          this.__resetRecord();\n          return;\n        }\n        return this.__firstLineToColumns(record);\n      }\n      if (columns === false && this.info.records === 0) {\n        this.state.expectedRecordLength = recordLength;\n      }\n      if (recordLength !== this.state.expectedRecordLength) {\n        const err =\n          columns === false\n            ? new CsvError(\n                \"CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\",\n                [\n                  \"Invalid Record Length:\",\n                  `expect ${this.state.expectedRecordLength},`,\n                  `got ${recordLength} on line ${this.info.lines}`,\n                ],\n                this.options,\n                this.__infoField(),\n                {\n                  record: record,\n                },\n              )\n            : new CsvError(\n                \"CSV_RECORD_INCONSISTENT_COLUMNS\",\n                [\n                  \"Invalid Record Length:\",\n                  `columns length is ${columns.length},`, // rename columns\n                  `got ${recordLength} on line ${this.info.lines}`,\n                ],\n                this.options,\n                this.__infoField(),\n                {\n                  record: record,\n                },\n              );\n        if (\n          relax_column_count === true ||\n          (relax_column_count_less === true &&\n            recordLength < this.state.expectedRecordLength) ||\n          (relax_column_count_more === true &&\n            recordLength > this.state.expectedRecordLength)\n        ) {\n          this.info.invalid_field_length++;\n          this.state.error = err;\n          // Error is undefined with skip_records_with_error\n        } else {\n          const finalErr = this.__error(err);\n          if (finalErr) return finalErr;\n        }\n      }\n      if (skip_records_with_empty_values === true && isRecordEmpty(record)) {\n        this.__resetRecord();\n        return;\n      }\n      if (this.state.recordHasError === true) {\n        this.__resetRecord();\n        this.state.recordHasError = false;\n        return;\n      }\n      this.info.records++;\n      if (from === 1 || this.info.records >= from) {\n        const { objname } = this.options;\n        // With columns, records are object\n        if (columns !== false) {\n          const obj = {};\n          // Transform record array to an object\n          for (let i = 0, l = record.length; i < l; i++) {\n            if (columns[i] === undefined || columns[i].disabled) continue;\n            // Turn duplicate columns into an array\n            if (\n              group_columns_by_name === true &&\n              obj[columns[i].name] !== undefined\n            ) {\n              if (Array.isArray(obj[columns[i].name])) {\n                obj[columns[i].name] = obj[columns[i].name].concat(record[i]);\n              } else {\n                obj[columns[i].name] = [obj[columns[i].name], record[i]];\n              }\n            } else {\n              obj[columns[i].name] = record[i];\n            }\n          }\n          // Without objname (default)\n          if (raw === true || info === true) {\n            const extRecord = Object.assign(\n              { record: obj },\n              raw === true\n                ? { raw: this.state.rawBuffer.toString(encoding) }\n                : {},\n              info === true ? { info: this.__infoRecord() } : {},\n            );\n            const err = this.__push(\n              objname === undefined ? extRecord : [obj[objname], extRecord],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          } else {\n            const err = this.__push(\n              objname === undefined ? obj : [obj[objname], obj],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          }\n          // Without columns, records are array\n        } else {\n          if (raw === true || info === true) {\n            const extRecord = Object.assign(\n              { record: record },\n              raw === true\n                ? { raw: this.state.rawBuffer.toString(encoding) }\n                : {},\n              info === true ? { info: this.__infoRecord() } : {},\n            );\n            const err = this.__push(\n              objname === undefined ? extRecord : [record[objname], extRecord],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          } else {\n            const err = this.__push(\n              objname === undefined ? record : [record[objname], record],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          }\n        }\n      }\n      this.__resetRecord();\n    },\n    __firstLineToColumns: function (record) {\n      const { firstLineToHeaders } = this.state;\n      try {\n        const headers =\n          firstLineToHeaders === undefined\n            ? record\n            : firstLineToHeaders.call(null, record);\n        if (!Array.isArray(headers)) {\n          return this.__error(\n            new CsvError(\n              \"CSV_INVALID_COLUMN_MAPPING\",\n              [\n                \"Invalid Column Mapping:\",\n                \"expect an array from column function,\",\n                `got ${JSON.stringify(headers)}`,\n              ],\n              this.options,\n              this.__infoField(),\n              {\n                headers: headers,\n              },\n            ),\n          );\n        }\n        const normalizedHeaders = normalize_columns_array(headers);\n        this.state.expectedRecordLength = normalizedHeaders.length;\n        this.options.columns = normalizedHeaders;\n        this.__resetRecord();\n        return;\n      } catch (err) {\n        return err;\n      }\n    },\n    __resetRecord: function () {\n      if (this.options.raw === true) {\n        this.state.rawBuffer.reset();\n      }\n      this.state.error = undefined;\n      this.state.record = [];\n      this.state.record_length = 0;\n    },\n    __onField: function () {\n      const { cast, encoding, rtrim, max_record_size } = this.options;\n      const { enabled, wasQuoting } = this.state;\n      // Short circuit for the from_line options\n      if (enabled === false) {\n        return this.__resetField();\n      }\n      let field = this.state.field.toString(encoding);\n      if (rtrim === true && wasQuoting === false) {\n        field = field.trimRight();\n      }\n      if (cast === true) {\n        const [err, f] = this.__cast(field);\n        if (err !== undefined) return err;\n        field = f;\n      }\n      this.state.record.push(field);\n      // Increment record length if record size must not exceed a limit\n      if (max_record_size !== 0 && typeof field === \"string\") {\n        this.state.record_length += field.length;\n      }\n      this.__resetField();\n    },\n    __resetField: function () {\n      this.state.field.reset();\n      this.state.wasQuoting = false;\n    },\n    __push: function (record, push) {\n      const { on_record } = this.options;\n      if (on_record !== undefined) {\n        const info = this.__infoRecord();\n        try {\n          record = on_record.call(null, record, info);\n        } catch (err) {\n          return err;\n        }\n        if (record === undefined || record === null) {\n          return;\n        }\n      }\n      push(record);\n    },\n    // Return a tuple with the error and the casted value\n    __cast: function (field) {\n      const { columns, relax_column_count } = this.options;\n      const isColumns = Array.isArray(columns);\n      // Dont loose time calling cast\n      // because the final record is an object\n      // and this field can't be associated to a key present in columns\n      if (\n        isColumns === true &&\n        relax_column_count &&\n        this.options.columns.length <= this.state.record.length\n      ) {\n        return [undefined, undefined];\n      }\n      if (this.state.castField !== null) {\n        try {\n          const info = this.__infoField();\n          return [undefined, this.state.castField.call(null, field, info)];\n        } catch (err) {\n          return [err];\n        }\n      }\n      if (this.__isFloat(field)) {\n        return [undefined, parseFloat(field)];\n      } else if (this.options.cast_date !== false) {\n        const info = this.__infoField();\n        return [undefined, this.options.cast_date.call(null, field, info)];\n      }\n      return [undefined, field];\n    },\n    // Helper to test if a character is a space or a line delimiter\n    __isCharTrimable: function (buf, pos) {\n      const isTrim = (buf, pos) => {\n        const { timchars } = this.state;\n        loop1: for (let i = 0; i < timchars.length; i++) {\n          const timchar = timchars[i];\n          for (let j = 0; j < timchar.length; j++) {\n            if (timchar[j] !== buf[pos + j]) continue loop1;\n          }\n          return timchar.length;\n        }\n        return 0;\n      };\n      return isTrim(buf, pos);\n    },\n    // Keep it in case we implement the `cast_int` option\n    // __isInt(value){\n    //   // return Number.isInteger(parseInt(value))\n    //   // return !isNaN( parseInt( obj ) );\n    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n    // }\n    __isFloat: function (value) {\n      return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery\n    },\n    __compareBytes: function (sourceBuf, targetBuf, targetPos, firstByte) {\n      if (sourceBuf[0] !== firstByte) return 0;\n      const sourceLength = sourceBuf.length;\n      for (let i = 1; i < sourceLength; i++) {\n        if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;\n      }\n      return sourceLength;\n    },\n    __isDelimiter: function (buf, pos, chr) {\n      const { delimiter, ignore_last_delimiters } = this.options;\n      if (\n        ignore_last_delimiters === true &&\n        this.state.record.length === this.options.columns.length - 1\n      ) {\n        return 0;\n      } else if (\n        ignore_last_delimiters !== false &&\n        typeof ignore_last_delimiters === \"number\" &&\n        this.state.record.length === ignore_last_delimiters - 1\n      ) {\n        return 0;\n      }\n      loop1: for (let i = 0; i < delimiter.length; i++) {\n        const del = delimiter[i];\n        if (del[0] === chr) {\n          for (let j = 1; j < del.length; j++) {\n            if (del[j] !== buf[pos + j]) continue loop1;\n          }\n          return del.length;\n        }\n      }\n      return 0;\n    },\n    __isRecordDelimiter: function (chr, buf, pos) {\n      const { record_delimiter } = this.options;\n      const recordDelimiterLength = record_delimiter.length;\n      loop1: for (let i = 0; i < recordDelimiterLength; i++) {\n        const rd = record_delimiter[i];\n        const rdLength = rd.length;\n        if (rd[0] !== chr) {\n          continue;\n        }\n        for (let j = 1; j < rdLength; j++) {\n          if (rd[j] !== buf[pos + j]) {\n            continue loop1;\n          }\n        }\n        return rd.length;\n      }\n      return 0;\n    },\n    __isEscape: function (buf, pos, chr) {\n      const { escape } = this.options;\n      if (escape === null) return false;\n      const l = escape.length;\n      if (escape[0] === chr) {\n        for (let i = 0; i < l; i++) {\n          if (escape[i] !== buf[pos + i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n    __isQuote: function (buf, pos) {\n      const { quote } = this.options;\n      if (quote === null) return false;\n      const l = quote.length;\n      for (let i = 0; i < l; i++) {\n        if (quote[i] !== buf[pos + i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    __autoDiscoverRecordDelimiter: function (buf, pos) {\n      const { encoding } = this.options;\n      // Note, we don't need to cache this information in state,\n      // It is only called on the first line until we find out a suitable\n      // record delimiter.\n      const rds = [\n        // Important, the windows line ending must be before mac os 9\n        Buffer.from(\"\\r\\n\", encoding),\n        Buffer.from(\"\\n\", encoding),\n        Buffer.from(\"\\r\", encoding),\n      ];\n      loop: for (let i = 0; i < rds.length; i++) {\n        const l = rds[i].length;\n        for (let j = 0; j < l; j++) {\n          if (rds[i][j] !== buf[pos + j]) {\n            continue loop;\n          }\n        }\n        this.options.record_delimiter.push(rds[i]);\n        this.state.recordDelimiterMaxLength = rds[i].length;\n        return rds[i].length;\n      }\n      return 0;\n    },\n    __error: function (msg) {\n      const { encoding, raw, skip_records_with_error } = this.options;\n      const err = typeof msg === \"string\" ? new Error(msg) : msg;\n      if (skip_records_with_error) {\n        this.state.recordHasError = true;\n        if (this.options.on_skip !== undefined) {\n          try {\n            this.options.on_skip(\n              err,\n              raw ? this.state.rawBuffer.toString(encoding) : undefined,\n            );\n          } catch (err) {\n            return err;\n          }\n        }\n        // this.emit('skip', err, raw ? this.state.rawBuffer.toString(encoding) : undefined);\n        return undefined;\n      } else {\n        return err;\n      }\n    },\n    __infoDataSet: function () {\n      return {\n        ...this.info,\n        columns: this.options.columns,\n      };\n    },\n    __infoRecord: function () {\n      const { columns, raw, encoding } = this.options;\n      return {\n        ...this.__infoDataSet(),\n        error: this.state.error,\n        header: columns === true,\n        index: this.state.record.length,\n        raw: raw ? this.state.rawBuffer.toString(encoding) : undefined,\n      };\n    },\n    __infoField: function () {\n      const { columns } = this.options;\n      const isColumns = Array.isArray(columns);\n      return {\n        ...this.__infoRecord(),\n        column:\n          isColumns === true\n            ? columns.length > this.state.record.length\n              ? columns[this.state.record.length].name\n              : null\n            : this.state.record.length,\n        quoting: this.state.wasQuoting,\n      };\n    },\n  };\n};\n\nexport { transform, CsvError };\n","import { CsvError, transform } from \"./api/index.js\";\n\nconst parse = function (data, opts = {}) {\n  if (typeof data === \"string\") {\n    data = Buffer.from(data);\n  }\n  const records = opts && opts.objname ? {} : [];\n  const parser = transform(opts);\n  const push = (record) => {\n    if (parser.options.objname === undefined) records.push(record);\n    else {\n      records[record[0]] = record[1];\n    }\n  };\n  const close = () => {};\n  const error = parser.parse(data, true, push, close);\n  if (error !== undefined) throw error;\n  // 250606: `parser.parse` was implemented as 2 calls:\n  // const err1 = parser.parse(data, false, push, close);\n  // if (err1 !== undefined) throw err1;\n  // const err2 = parser.parse(undefined, true, push, close);\n  // if (err2 !== undefined) throw err2;\n  return records;\n};\n\n// export default parse\nexport { parse };\nexport { CsvError };\n","import { parse } from 'csv-parse/sync';\nimport { Transaction } from '../models/transaction.js';\n\nexport class BanorteParser {\n    /**\n     * Parses the entire Banorte pipe-delimited file content into an array of Transactions.\n     *\n     * @param {string} fileContent - The full text content of the Banorte file.\n     * @returns {Transaction[]} Array of parsed Transaction objects.\n     */\n    parse(fileContent) {\n        const records = parse(fileContent, {\n            delimiter: '|',\n            columns: true,\n            skip_empty_lines: true,\n            trim: true,\n            relax_column_count: true,\n        });\n\n        return records\n            .map(record => this.parseRecord(record))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single Banorte transaction record object into a Transaction instance.\n     *\n     * @param {Object} record - Parsed CSV record object with keys from header.\n     * @param {string} record.Cuenta - Account number.\n     * @param {string} record['Fecha De Operación'] - Transaction date (DD/MM/YYYY).\n     * @param {string} record.Referencia - Reference code.\n     * @param {string} record.Descripción - Description of transaction.\n     * @param {string} record.Depósitos - Deposits amount (currency formatted).\n     * @param {string} record.Retiros - Withdrawals amount (currency formatted).\n     * @param {string} record.Saldo - Balance after transaction (currency formatted).\n     * @returns {Transaction|null} Transaction instance or null if required fields missing.\n     */\n    parseRecord(record) {\n        const {\n            Cuenta: account,\n            'Fecha De Operación': dateStr,\n            Referencia: reference,\n            Descripción: description,\n            Depósitos: depositsStr,\n            Retiros: withdrawalsStr,\n            Saldo: balanceStr,\n        } = record;\n\n        if (!account || !dateStr) return null;\n\n        const date = this._formatDate(dateStr);\n        const deposits = this._parseMoney(depositsStr);\n        const withdrawals = this._parseMoney(withdrawalsStr);\n        const balance = this._parseMoney(balanceStr);\n        const amount = deposits !== 0 ? deposits : -withdrawals;\n\n        return new Transaction({\n            date,\n            type: deposits !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference,\n            account,\n            description,\n            bank: 'Banorte',\n            raw: JSON.stringify(record),\n        });\n    }\n\n    /**\n     * Parses a currency string (e.g. \"$13,295.61\") into a float number.\n     *\n     * @param {string} str - Currency formatted string.\n     * @returns {number} Parsed numeric value or 0 if invalid.\n     */\n    _parseMoney(str) {\n        if (!str) return 0;\n        return parseFloat(str.replace(/[$,]/g, '')) || 0;\n    }\n\n    /**\n     * Converts a date string from DD/MM/YYYY format to ISO YYYY-MM-DD.\n     *\n     * @param {string} input - Date string in DD/MM/YYYY format.\n     * @returns {string} Reformatted date string in YYYY-MM-DD format.\n     */\n    _formatDate(input) {\n        const [day, month, year] = input.split('/');\n        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class BbvaParser {\n    /**\n     * Parses the full BBVA TXT content.\n     *\n     * @param {string} fileContent\n     * @returns {Transaction[]}\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split(/\\r?\\n/)\n            .map(line => line.trim())\n            .filter(line => this._looksLikeTransaction(line));\n\n        return lines\n            .map(line => this.parseLine(line))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single transaction line.\n     *\n     * @param {string} line\n     * @returns {Transaction|null}\n     */\n    parseLine(line) {\n        const regex = /^(\\d{2}-\\d{2}-\\d{4})\\s+(.+?)\\s+([\\d,]+\\.\\d{2})?\\s*([\\d,]+\\.\\d{2})?\\s+([\\d,]+\\.\\d{2})$/;\n        const match = line.match(regex);\n\n        if (!match) return null;\n\n        const [, dateStr, description, debitStr, creditStr, balanceStr] = match;\n\n        const date = this._formatDate(dateStr);\n        const debit = this._parseNumber(debitStr);\n        const credit = this._parseNumber(creditStr);\n        const balance = this._parseNumber(balanceStr);\n        const amount = credit !== 0 ? credit : -debit;\n\n        return new Transaction({\n            date,\n            type: credit !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference: '',\n            account: '',\n            description: description.trim(),\n            bank: 'BBVA',\n            raw: line,\n        });\n    }\n\n    /**\n     * Filters out headers and irrelevant lines.\n     *\n     * @param {string} line\n     * @returns {boolean}\n     */\n    _looksLikeTransaction(line) {\n        return /^\\d{2}-\\d{2}-\\d{4}/.test(line);\n    }\n\n    /**\n     * Parses number with commas as thousands separator.\n     *\n     * @param {string} str\n     * @returns {number}\n     */\n    _parseNumber(str) {\n        if (!str) return 0;\n        return parseFloat(str.replace(/,/g, ''));\n    }\n\n    /**\n     * Converts DD-MM-YYYY to YYYY-MM-DD.\n     *\n     * @param {string} input\n     * @returns {string}\n     */\n    _formatDate(input) {\n        const [day, month, year] = input.split('-');\n        return `${year}-${month}-${day}`;\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class ScotiabankParser {\n    /**\n     * Parses a Scotiabank TXT file content into a list of transactions.\n     *\n     * @param {string} fileContent\n     * @returns {Transaction[]}\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split('\\n')\n            .map(line => line.trim())\n            .filter(line => line.length > 100);\n\n        const transactions = [];\n\n        for (const line of lines) {\n            const accountType = line.substring(0, 3);\n            const currency = line.substring(3, 6);\n            const rawAccountNumber = line.substring(6, 26);\n            const accountNumber = rawAccountNumber.replace(/^0+/, ''); // Strip leading zeros\n            const date = line.substring(28, 36);\n\n            transactions.push(new Transaction({\n                date,\n                type: accountType,\n                currency,\n                reference: null,\n                accountNumber,\n                description: '',\n                amount: 0,\n                balance: 0,\n                bank: 'Scotiabank',\n                trackingKey: '',\n                beneficiary: '',\n                extra: line,\n            }));\n        }\n\n        return transactions;\n    }\n}\n","import { AfirmeParser } from './parsers/afirme-parser.js';\nimport { BanBajioParser } from './parsers/banbajio-parser.js';\nimport { BanorteParser } from './parsers/banorte-parser.js';\nimport { BbvaParser } from './parsers/bbva-parser.js';\nimport { ScotiabankParser } from './parsers/scotiabank-parser.js';\n\n/**\n * Returns the appropriate parser instance for a given bank name.\n *\n * @param {string} bankName - Name of the bank (case-insensitive)\n * @returns {BaseParser} Instance of a parser for the specified bank\n * @throws {Error} If no parser is available for the given bank\n */\nexport function getParserForBank(bankName) {\n    switch (bankName.toLowerCase()) {\n        case 'afirme':\n            return new AfirmeParser();\n        case 'banbajio':\n            return new BanBajioParser();\n        case 'banorte':\n            return new BanorteParser();\n        case 'bbva':\n            return new BbvaParser();\n        case 'scotiabank':\n            return new ScotiabankParser();\n        default:\n            throw new Error(`No parser available for bank: ${bankName}`);\n    }\n}\n"],"names":["Transaction","constructor","date","type","amount","balance","description","reference","bank","accountNumber","beneficiary","trackingKey","extra","this","AfirmeParser","parse","fileContent","split","map","line","trim","filter","length","parseLine","Boolean","parts","_splitCsvLine","_formatDate","debit","parseFloat","credit","account","raw","input","day","month","year","Number","padStart","BanBajioParser","slice","_splitCsvWithLimit","index","dateStr","timeStr","receipt","chargesStr","creditsStr","balanceStr","_formatDateTime","charges","_parseMoney","credits","limit","lastIndex","count","i","push","substring","str","replace","mon","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","CsvError","Error","code","message","options","contexts","Array","isArray","join","super","undefined","captureStackTrace","context","key","value","Buffer","isBuffer","toString","encoding","JSON","stringify","is_object","obj","normalize_columns_array","columns","normalizedColumns","l","column","disabled","name","ResizeableBuffer","size","buf","allocUnsafe","prepend","val","resize","copy","clone","append","from","Uint8Array","prototype","call","toJSON","reset","init_state","bomSkipped","bufBytesStart","castField","cast_function","commenting","error","enabled","from_line","escaping","escapeIsQuote","escape","quote","compare","expectedRecordLength","field","firstLineToHeaders","cast_first_line_to_header","needMoreDataSize","Math","max","comment","delimiter","previousBuf","quoting","stop","rawBuffer","record","recordHasError","record_length","recordDelimiterMaxLength","record_delimiter","v","trimChars","wasQuoting","wasRowDelimiter","timchars","underscore","_","match","toLowerCase","normalize_options","opts","opt","bom","cast","cast_date","Date","isNaN","group_columns_by_name","comment_no_infix","delimiter_json","test","parseInt","isInteger","ignore_last_delimiters","floor","info","max_record_size","objname","on_record","on_skip","rd","relax_column_count","relax_column_count_less","relax_column_count_more","relax_quotes","skip_empty_lines","skip_records_with_empty_values","skip_records_with_error","rtrim","ltrim","to","to_line","isRecordEmpty","every","boms","utf8","utf16le","data","records","parser","original_options","bytes","comment_lines","empty_lines","invalid_field_length","lines","state","__needMoreData","bufLen","end","nextBuf","close","concat","bomLength","pos","__autoDiscoverRecordDelimiter","chr","__isEscape","__isQuote","nextChr","isNextChrTrimable","__isCharTrimable","isNextChrComment","__compareBytes","isNextChrDelimiter","__isDelimiter","isNextChrRecordDelimiter","__isRecordDelimiter","err","__error","String","fromCharCode","__infoField","Object","keys","b","equals","recordDelimiterLength","__resetField","__resetRecord","errField","__onField","errRecord","__onRecord","delimiterLength","lappend","rappend","recordLength","__firstLineToColumns","finalErr","extRecord","assign","__infoRecord","__push","headers","normalizedHeaders","trimRight","f","__cast","__isFloat","loop1","timchar","j","isTrim","sourceBuf","targetBuf","targetPos","firstByte","sourceLength","del","rdLength","rds","loop","msg","__infoDataSet","header","isColumns","transform","BanorteParser","parseRecord","Cuenta","Referencia","depositsStr","Retiros","withdrawalsStr","Saldo","deposits","withdrawals","BbvaParser","_looksLikeTransaction","debitStr","creditStr","_parseNumber","ScotiabankParser","transactions","accountType","currency","bankName"],"mappings":"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","x_google_ignoreList":[3,4,5,6,7,8,9,10,11]}