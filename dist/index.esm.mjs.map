{"version":3,"file":"index.esm.mjs","sources":["../src/models/transaction.js","../src/parsers/afirme-parser.js","../src/parsers/banbajio-parser.js","../node_modules/csv-parse/lib/api/CsvError.js","../node_modules/csv-parse/lib/utils/is_object.js","../node_modules/csv-parse/lib/api/normalize_columns_array.js","../node_modules/csv-parse/lib/utils/ResizeableBuffer.js","../node_modules/csv-parse/lib/api/init_state.js","../node_modules/csv-parse/lib/utils/underscore.js","../node_modules/csv-parse/lib/api/normalize_options.js","../node_modules/csv-parse/lib/api/index.js","../node_modules/csv-parse/lib/sync.js","../src/parsers/banorte-parser.js","../src/parsers/bbva-parser.js","../src/parsers/scotiabank-parser.js","../src/index.js"],"sourcesContent":["/**\n * Represents a bank transaction.\n */\nexport class Transaction {\n    /**\n     * Creates a new Transaction instance.\n     *\n     * @param {Object} params\n     * @param {string} params.date - Transaction date string, format depends on bank\n     * @param {string} params.type - Transaction type (e.g. 'Cargo', 'Abono')\n     * @param {number} params.amount - Transaction amount\n     * @param {number} params.balance - Account balance after transaction\n     * @param {string} params.description - Description or concept of transaction\n     * @param {string} params.reference - Reference or tracking number\n     * @param {string} params.bank - Bank involved in transaction\n     * @param {string|null} [params.accountNumber] - Origin/destination account number, if any\n     * @param {string|null} [params.beneficiary] - Beneficiary of the transaction, if any\n     * @param {string|null} [params.trackingKey] - Internal tracking key, if any\n     * @param {string} [params.extra] - Raw original line or extra info\n     */\n    constructor({\n                    date,\n                    type,\n                    amount,\n                    balance,\n                    description,\n                    reference,\n                    bank,\n                    accountNumber = null,\n                    beneficiary = null,\n                    trackingKey = null,\n                    extra = '',\n                }) {\n        this.date = date;\n        this.type = type;\n        this.amount = amount;\n        this.balance = balance;\n        this.description = description;\n        this.reference = reference;\n        this.bank = bank;\n        this.accountNumber = accountNumber;\n        this.beneficiary = beneficiary;\n        this.trackingKey = trackingKey;\n        this.extra = extra;\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class AfirmeParser {\n    /**\n     * Parses the entire CSV file content into an array of Transactions.\n     *\n     * @param {string} fileContent - The full CSV file content as a string.\n     * @returns {Transaction[]} Array of parsed transactions.\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split(/\\r?\\n/)\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n\n        return lines\n            .map(line => this.parseLine(line))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single CSV line into a Transaction instance.\n     *\n     * @param {string} line - A CSV line representing a transaction.\n     * @returns {Transaction|null} Parsed Transaction or null if invalid.\n     */\n    parseLine(line) {\n        const parts = this._splitCsvLine(line);\n        if (parts.length < 7) return null;\n\n        const description = parts[0];\n        const date = this._formatDate(parts[1]);\n        const reference = parts[2];\n        const debit = parseFloat(parts[3]) || 0;\n        const credit = parseFloat(parts[4]) || 0;\n        const balance = parseFloat(parts[5]) || 0;\n        const account = parts[6];\n        const amount = credit !== 0 ? credit : -debit;\n\n        return new Transaction({\n            date,\n            type: credit !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference,\n            account,\n            description,\n            bank: 'Afirme',\n            raw: line,\n        });\n    }\n\n    /**\n     * Converts a date string in DD/MM/YY format to ISO YYYY-MM-DD format.\n     *\n     * @param {string} input - Date string in DD/MM/YY format.\n     * @returns {string} Date string in YYYY-MM-DD format.\n     */\n    _formatDate(input) {\n        const [day, month, year] = input.split('/');\n        const fullYear = Number(year) > 70 ? `19${year}` : `20${year}`;\n        return `${fullYear}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    }\n\n    /**\n     * Splits a CSV line by commas into an array of fields.\n     * Does not handle quoted commas.\n     *\n     * @param {string} line - A CSV line string.\n     * @returns {string[]} Array of CSV fields.\n     */\n    _splitCsvLine(line) {\n        return line.split(',');\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class BanBajioParser {\n    /**\n     * Parses the entire BanBajio CSV file content.\n     *\n     * @param {string} fileContent - Full CSV content as string.\n     * @returns {Transaction[]} Array of transactions.\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split(/\\r?\\n/)\n            .map(line => line.trim())\n            .filter(line => line.length > 0);\n\n        // Skip the first two lines (metadata + headers)\n        const dataLines = lines.slice(2);\n\n        return dataLines\n            .map(line => this.parseLine(line))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single CSV line of BanBajio transaction.\n     *\n     * @param {string} line - CSV line string.\n     * @returns {Transaction|null}\n     */\n    parseLine(line) {\n        // Split by comma, but beware description may contain commas or pipes.\n        // Let's split into exactly 8 fields by limit split:\n        // Index, Date, Time, Receipt, Description, Charges, Credits, Balance\n\n        // A naive split on comma might break Description if it contains commas.\n        // But from sample, the first 4 fields are fixed-length,\n        // So we can split first 5 commas to get 6 fields, then last 2 fields.\n\n        const parts = this._splitCsvWithLimit(line, 7);\n        if (parts.length < 8) return null;\n\n        const [\n            index,\n            dateStr,\n            timeStr,\n            receipt,\n            description,\n            chargesStr,\n            creditsStr,\n            balanceStr,\n        ] = parts;\n\n        const date = this._formatDateTime(dateStr, timeStr);\n        const charges = this._parseMoney(chargesStr);\n        const credits = this._parseMoney(creditsStr);\n        const balance = this._parseMoney(balanceStr);\n        const amount = credits !== 0 ? credits : -charges;\n\n        return new Transaction({\n            date,\n            type: credits !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference: receipt,\n            account: null, // No account in sample\n            description,\n            bank: 'BanBajio',\n            raw: line,\n        });\n    }\n\n    /**\n     * Splits a CSV line string into parts with a maximum number of splits,\n     * so description with commas won't break field alignment.\n     *\n     * @param {string} line\n     * @param {number} limit - Max splits (max fields - 1)\n     * @returns {string[]}\n     */\n    _splitCsvWithLimit(line, limit) {\n        const parts = [];\n        let lastIndex = 0;\n        let count = 0;\n\n        for (let i = 0; i < line.length; i++) {\n            if (line[i] === ',' && count < limit) {\n                parts.push(line.substring(lastIndex, i));\n                lastIndex = i + 1;\n                count++;\n            }\n        }\n        parts.push(line.substring(lastIndex));\n        return parts;\n    }\n\n    /**\n     * Parses money strings like \"58928.00\" into number.\n     *\n     * @param {string} str\n     * @returns {number}\n     */\n    _parseMoney(str) {\n        if (!str) return 0;\n        // Remove commas and parse float\n        return parseFloat(str.replace(/,/g, '')) || 0;\n    }\n\n    /**\n     * Converts date and time strings into ISO 8601 date-time string.\n     *\n     * @param {string} dateStr - e.g. \"28-Nov-2024\"\n     * @param {string} timeStr - e.g. \"09:33:24\"\n     * @returns {string} ISO date-time string \"YYYY-MM-DDTHH:mm:ss\"\n     */\n    _formatDateTime(dateStr, timeStr) {\n        // Convert DD-MMM-YYYY (like 28-Nov-2024) to YYYY-MM-DD\n        const months = {\n            Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06',\n            Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12',\n        };\n        const [day, mon, year] = dateStr.split('-');\n        const monthNum = months[mon] || '01';\n\n        // Combine into ISO 8601\n        return `${year}-${monthNum}-${day.padStart(2, '0')}T${timeStr}`;\n    }\n}\n","class CsvError extends Error {\n  constructor(code, message, options, ...contexts) {\n    if (Array.isArray(message)) message = message.join(\" \").trim();\n    super(message);\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(this, CsvError);\n    }\n    this.code = code;\n    for (const context of contexts) {\n      for (const key in context) {\n        const value = context[key];\n        this[key] = Buffer.isBuffer(value)\n          ? value.toString(options.encoding)\n          : value == null\n            ? value\n            : JSON.parse(JSON.stringify(value));\n      }\n    }\n  }\n}\n\nexport { CsvError };\n","const is_object = function (obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n};\n\nexport { is_object };\n","import { CsvError } from \"./CsvError.js\";\nimport { is_object } from \"../utils/is_object.js\";\n\nconst normalize_columns_array = function (columns) {\n  const normalizedColumns = [];\n  for (let i = 0, l = columns.length; i < l; i++) {\n    const column = columns[i];\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = { disabled: true };\n    } else if (typeof column === \"string\") {\n      normalizedColumns[i] = { name: column };\n    } else if (is_object(column)) {\n      if (typeof column.name !== \"string\") {\n        throw new CsvError(\"CSV_OPTION_COLUMNS_MISSING_NAME\", [\n          \"Option columns missing name:\",\n          `property \"name\" is required at position ${i}`,\n          \"when column is an object literal\",\n        ]);\n      }\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError(\"CSV_INVALID_COLUMN_DEFINITION\", [\n        \"Invalid column definition:\",\n        \"expect a string or a literal object,\",\n        `got ${JSON.stringify(column)} at position ${i}`,\n      ]);\n    }\n  }\n  return normalizedColumns;\n};\n\nexport { normalize_columns_array };\n","class ResizeableBuffer {\n  constructor(size = 100) {\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.allocUnsafe(size);\n  }\n  prepend(val) {\n    if (Buffer.isBuffer(val)) {\n      const length = this.length + val.length;\n      if (length >= this.size) {\n        this.resize();\n        if (length >= this.size) {\n          throw Error(\"INVALID_BUFFER_STATE\");\n        }\n      }\n      const buf = this.buf;\n      this.buf = Buffer.allocUnsafe(this.size);\n      val.copy(this.buf, 0);\n      buf.copy(this.buf, val.length);\n      this.length += val.length;\n    } else {\n      const length = this.length++;\n      if (length === this.size) {\n        this.resize();\n      }\n      const buf = this.clone();\n      this.buf[0] = val;\n      buf.copy(this.buf, 1, 0, length);\n    }\n  }\n  append(val) {\n    const length = this.length++;\n    if (length === this.size) {\n      this.resize();\n    }\n    this.buf[length] = val;\n  }\n  clone() {\n    return Buffer.from(this.buf.slice(0, this.length));\n  }\n  resize() {\n    const length = this.length;\n    this.size = this.size * 2;\n    const buf = Buffer.allocUnsafe(this.size);\n    this.buf.copy(buf, 0, 0, length);\n    this.buf = buf;\n  }\n  toString(encoding) {\n    if (encoding) {\n      return this.buf.slice(0, this.length).toString(encoding);\n    } else {\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n    }\n  }\n  toJSON() {\n    return this.toString(\"utf8\");\n  }\n  reset() {\n    this.length = 0;\n  }\n}\n\nexport default ResizeableBuffer;\n","import ResizeableBuffer from \"../utils/ResizeableBuffer.js\";\n\n// white space characters\n// https://en.wikipedia.org/wiki/Whitespace_character\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types\n// \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\nconst np = 12;\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\nconst space = 32;\nconst tab = 9;\n\nconst init_state = function (options) {\n  return {\n    bomSkipped: false,\n    bufBytesStart: 0,\n    castField: options.cast_function,\n    commenting: false,\n    // Current error encountered by a record\n    error: undefined,\n    enabled: options.from_line === 1,\n    escaping: false,\n    escapeIsQuote:\n      Buffer.isBuffer(options.escape) &&\n      Buffer.isBuffer(options.quote) &&\n      Buffer.compare(options.escape, options.quote) === 0,\n    // columns can be `false`, `true`, `Array`\n    expectedRecordLength: Array.isArray(options.columns)\n      ? options.columns.length\n      : undefined,\n    field: new ResizeableBuffer(20),\n    firstLineToHeaders: options.cast_first_line_to_header,\n    needMoreDataSize: Math.max(\n      // Skip if the remaining buffer smaller than comment\n      options.comment !== null ? options.comment.length : 0,\n      // Skip if the remaining buffer can be delimiter\n      ...options.delimiter.map((delimiter) => delimiter.length),\n      // Skip if the remaining buffer can be escape sequence\n      options.quote !== null ? options.quote.length : 0,\n    ),\n    previousBuf: undefined,\n    quoting: false,\n    stop: false,\n    rawBuffer: new ResizeableBuffer(100),\n    record: [],\n    recordHasError: false,\n    record_length: 0,\n    recordDelimiterMaxLength:\n      options.record_delimiter.length === 0\n        ? 0\n        : Math.max(...options.record_delimiter.map((v) => v.length)),\n    trimChars: [\n      Buffer.from(\" \", options.encoding)[0],\n      Buffer.from(\"\\t\", options.encoding)[0],\n    ],\n    wasQuoting: false,\n    wasRowDelimiter: false,\n    timchars: [\n      Buffer.from(Buffer.from([cr], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([nl], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([np], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([space], \"utf8\").toString(), options.encoding),\n      Buffer.from(Buffer.from([tab], \"utf8\").toString(), options.encoding),\n    ],\n  };\n};\n\nexport { init_state };\n","const underscore = function (str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return \"_\" + match.toLowerCase();\n  });\n};\n\nexport { underscore };\n","import { normalize_columns_array } from \"./normalize_columns_array.js\";\nimport { CsvError } from \"./CsvError.js\";\nimport { underscore } from \"../utils/underscore.js\";\n\nconst normalize_options = function (opts) {\n  const options = {};\n  // Merge with user options\n  for (const opt in opts) {\n    options[underscore(opt)] = opts[opt];\n  }\n  // Normalize option `encoding`\n  // Note: defined first because other options depends on it\n  // to convert chars/strings into buffers.\n  if (options.encoding === undefined || options.encoding === true) {\n    options.encoding = \"utf8\";\n  } else if (options.encoding === null || options.encoding === false) {\n    options.encoding = null;\n  } else if (\n    typeof options.encoding !== \"string\" &&\n    options.encoding !== null\n  ) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_ENCODING\",\n      [\n        \"Invalid option encoding:\",\n        \"encoding must be a string or null to return a buffer,\",\n        `got ${JSON.stringify(options.encoding)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `bom`\n  if (\n    options.bom === undefined ||\n    options.bom === null ||\n    options.bom === false\n  ) {\n    options.bom = false;\n  } else if (options.bom !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_BOM\",\n      [\n        \"Invalid option bom:\",\n        \"bom must be true,\",\n        `got ${JSON.stringify(options.bom)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `cast`\n  options.cast_function = null;\n  if (\n    options.cast === undefined ||\n    options.cast === null ||\n    options.cast === false ||\n    options.cast === \"\"\n  ) {\n    options.cast = undefined;\n  } else if (typeof options.cast === \"function\") {\n    options.cast_function = options.cast;\n    options.cast = true;\n  } else if (options.cast !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_CAST\",\n      [\n        \"Invalid option cast:\",\n        \"cast must be true or a function,\",\n        `got ${JSON.stringify(options.cast)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `cast_date`\n  if (\n    options.cast_date === undefined ||\n    options.cast_date === null ||\n    options.cast_date === false ||\n    options.cast_date === \"\"\n  ) {\n    options.cast_date = false;\n  } else if (options.cast_date === true) {\n    options.cast_date = function (value) {\n      const date = Date.parse(value);\n      return !isNaN(date) ? new Date(date) : value;\n    };\n  } else if (typeof options.cast_date !== \"function\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_CAST_DATE\",\n      [\n        \"Invalid option cast_date:\",\n        \"cast_date must be true or a function,\",\n        `got ${JSON.stringify(options.cast_date)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `columns`\n  options.cast_first_line_to_header = undefined;\n  if (options.columns === true) {\n    // Fields in the first line are converted as-is to columns\n    options.cast_first_line_to_header = undefined;\n  } else if (typeof options.columns === \"function\") {\n    options.cast_first_line_to_header = options.columns;\n    options.columns = true;\n  } else if (Array.isArray(options.columns)) {\n    options.columns = normalize_columns_array(options.columns);\n  } else if (\n    options.columns === undefined ||\n    options.columns === null ||\n    options.columns === false\n  ) {\n    options.columns = false;\n  } else {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_COLUMNS\",\n      [\n        \"Invalid option columns:\",\n        \"expect an array, a function or true,\",\n        `got ${JSON.stringify(options.columns)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `group_columns_by_name`\n  if (\n    options.group_columns_by_name === undefined ||\n    options.group_columns_by_name === null ||\n    options.group_columns_by_name === false\n  ) {\n    options.group_columns_by_name = false;\n  } else if (options.group_columns_by_name !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\",\n      [\n        \"Invalid option group_columns_by_name:\",\n        \"expect an boolean,\",\n        `got ${JSON.stringify(options.group_columns_by_name)}`,\n      ],\n      options,\n    );\n  } else if (options.columns === false) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME\",\n      [\n        \"Invalid option group_columns_by_name:\",\n        \"the `columns` mode must be activated.\",\n      ],\n      options,\n    );\n  }\n  // Normalize option `comment`\n  if (\n    options.comment === undefined ||\n    options.comment === null ||\n    options.comment === false ||\n    options.comment === \"\"\n  ) {\n    options.comment = null;\n  } else {\n    if (typeof options.comment === \"string\") {\n      options.comment = Buffer.from(options.comment, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.comment)) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_COMMENT\",\n        [\n          \"Invalid option comment:\",\n          \"comment must be a buffer or a string,\",\n          `got ${JSON.stringify(options.comment)}`,\n        ],\n        options,\n      );\n    }\n  }\n  // Normalize option `comment_no_infix`\n  if (\n    options.comment_no_infix === undefined ||\n    options.comment_no_infix === null ||\n    options.comment_no_infix === false\n  ) {\n    options.comment_no_infix = false;\n  } else if (options.comment_no_infix !== true) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_COMMENT\",\n      [\n        \"Invalid option comment_no_infix:\",\n        \"value must be a boolean,\",\n        `got ${JSON.stringify(options.comment_no_infix)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `delimiter`\n  const delimiter_json = JSON.stringify(options.delimiter);\n  if (!Array.isArray(options.delimiter))\n    options.delimiter = [options.delimiter];\n  if (options.delimiter.length === 0) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_DELIMITER\",\n      [\n        \"Invalid option delimiter:\",\n        \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n        `got ${delimiter_json}`,\n      ],\n      options,\n    );\n  }\n  options.delimiter = options.delimiter.map(function (delimiter) {\n    if (delimiter === undefined || delimiter === null || delimiter === false) {\n      return Buffer.from(\",\", options.encoding);\n    }\n    if (typeof delimiter === \"string\") {\n      delimiter = Buffer.from(delimiter, options.encoding);\n    }\n    if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_DELIMITER\",\n        [\n          \"Invalid option delimiter:\",\n          \"delimiter must be a non empty string or buffer or array of string|buffer,\",\n          `got ${delimiter_json}`,\n        ],\n        options,\n      );\n    }\n    return delimiter;\n  });\n  // Normalize option `escape`\n  if (options.escape === undefined || options.escape === true) {\n    options.escape = Buffer.from('\"', options.encoding);\n  } else if (typeof options.escape === \"string\") {\n    options.escape = Buffer.from(options.escape, options.encoding);\n  } else if (options.escape === null || options.escape === false) {\n    options.escape = null;\n  }\n  if (options.escape !== null) {\n    if (!Buffer.isBuffer(options.escape)) {\n      throw new Error(\n        `Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`,\n      );\n    }\n  }\n  // Normalize option `from`\n  if (options.from === undefined || options.from === null) {\n    options.from = 1;\n  } else {\n    if (typeof options.from === \"string\" && /\\d+/.test(options.from)) {\n      options.from = parseInt(options.from);\n    }\n    if (Number.isInteger(options.from)) {\n      if (options.from < 0) {\n        throw new Error(\n          `Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`,\n      );\n    }\n  }\n  // Normalize option `from_line`\n  if (options.from_line === undefined || options.from_line === null) {\n    options.from_line = 1;\n  } else {\n    if (\n      typeof options.from_line === \"string\" &&\n      /\\d+/.test(options.from_line)\n    ) {\n      options.from_line = parseInt(options.from_line);\n    }\n    if (Number.isInteger(options.from_line)) {\n      if (options.from_line <= 0) {\n        throw new Error(\n          `Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`,\n      );\n    }\n  }\n  // Normalize options `ignore_last_delimiters`\n  if (\n    options.ignore_last_delimiters === undefined ||\n    options.ignore_last_delimiters === null\n  ) {\n    options.ignore_last_delimiters = false;\n  } else if (typeof options.ignore_last_delimiters === \"number\") {\n    options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);\n    if (options.ignore_last_delimiters === 0) {\n      options.ignore_last_delimiters = false;\n    }\n  } else if (typeof options.ignore_last_delimiters !== \"boolean\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS\",\n      [\n        \"Invalid option `ignore_last_delimiters`:\",\n        \"the value must be a boolean value or an integer,\",\n        `got ${JSON.stringify(options.ignore_last_delimiters)}`,\n      ],\n      options,\n    );\n  }\n  if (options.ignore_last_delimiters === true && options.columns === false) {\n    throw new CsvError(\n      \"CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS\",\n      [\n        \"The option `ignore_last_delimiters`\",\n        \"requires the activation of the `columns` option\",\n      ],\n      options,\n    );\n  }\n  // Normalize option `info`\n  if (\n    options.info === undefined ||\n    options.info === null ||\n    options.info === false\n  ) {\n    options.info = false;\n  } else if (options.info !== true) {\n    throw new Error(\n      `Invalid Option: info must be true, got ${JSON.stringify(options.info)}`,\n    );\n  }\n  // Normalize option `max_record_size`\n  if (\n    options.max_record_size === undefined ||\n    options.max_record_size === null ||\n    options.max_record_size === false\n  ) {\n    options.max_record_size = 0;\n  } else if (\n    Number.isInteger(options.max_record_size) &&\n    options.max_record_size >= 0\n  ) {\n    // Great, nothing to do\n  } else if (\n    typeof options.max_record_size === \"string\" &&\n    /\\d+/.test(options.max_record_size)\n  ) {\n    options.max_record_size = parseInt(options.max_record_size);\n  } else {\n    throw new Error(\n      `Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`,\n    );\n  }\n  // Normalize option `objname`\n  if (\n    options.objname === undefined ||\n    options.objname === null ||\n    options.objname === false\n  ) {\n    options.objname = undefined;\n  } else if (Buffer.isBuffer(options.objname)) {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty buffer`);\n    }\n    if (options.encoding === null) {\n      // Don't call `toString`, leave objname as a buffer\n    } else {\n      options.objname = options.objname.toString(options.encoding);\n    }\n  } else if (typeof options.objname === \"string\") {\n    if (options.objname.length === 0) {\n      throw new Error(`Invalid Option: objname must be a non empty string`);\n    }\n    // Great, nothing to do\n  } else if (typeof options.objname === \"number\") {\n    // if(options.objname.length === 0){\n    //   throw new Error(`Invalid Option: objname must be a non empty string`);\n    // }\n    // Great, nothing to do\n  } else {\n    throw new Error(\n      `Invalid Option: objname must be a string or a buffer, got ${options.objname}`,\n    );\n  }\n  if (options.objname !== undefined) {\n    if (typeof options.objname === \"number\") {\n      if (options.columns !== false) {\n        throw Error(\n          \"Invalid Option: objname index cannot be combined with columns or be defined as a field\",\n        );\n      }\n    } else {\n      // A string or a buffer\n      if (options.columns === false) {\n        throw Error(\n          \"Invalid Option: objname field must be combined with columns or be defined as an index\",\n        );\n      }\n    }\n  }\n  // Normalize option `on_record`\n  if (options.on_record === undefined || options.on_record === null) {\n    options.on_record = undefined;\n  } else if (typeof options.on_record !== \"function\") {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_ON_RECORD\",\n      [\n        \"Invalid option `on_record`:\",\n        \"expect a function,\",\n        `got ${JSON.stringify(options.on_record)}`,\n      ],\n      options,\n    );\n  }\n  // Normalize option `on_skip`\n  // options.on_skip ??= (err, chunk) => {\n  //   this.emit('skip', err, chunk);\n  // };\n  if (\n    options.on_skip !== undefined &&\n    options.on_skip !== null &&\n    typeof options.on_skip !== \"function\"\n  ) {\n    throw new Error(\n      `Invalid Option: on_skip must be a function, got ${JSON.stringify(options.on_skip)}`,\n    );\n  }\n  // Normalize option `quote`\n  if (\n    options.quote === null ||\n    options.quote === false ||\n    options.quote === \"\"\n  ) {\n    options.quote = null;\n  } else {\n    if (options.quote === undefined || options.quote === true) {\n      options.quote = Buffer.from('\"', options.encoding);\n    } else if (typeof options.quote === \"string\") {\n      options.quote = Buffer.from(options.quote, options.encoding);\n    }\n    if (!Buffer.isBuffer(options.quote)) {\n      throw new Error(\n        `Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`,\n      );\n    }\n  }\n  // Normalize option `raw`\n  if (\n    options.raw === undefined ||\n    options.raw === null ||\n    options.raw === false\n  ) {\n    options.raw = false;\n  } else if (options.raw !== true) {\n    throw new Error(\n      `Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`,\n    );\n  }\n  // Normalize option `record_delimiter`\n  if (options.record_delimiter === undefined) {\n    options.record_delimiter = [];\n  } else if (\n    typeof options.record_delimiter === \"string\" ||\n    Buffer.isBuffer(options.record_delimiter)\n  ) {\n    if (options.record_delimiter.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a non empty string or buffer,\",\n          `got ${JSON.stringify(options.record_delimiter)}`,\n        ],\n        options,\n      );\n    }\n    options.record_delimiter = [options.record_delimiter];\n  } else if (!Array.isArray(options.record_delimiter)) {\n    throw new CsvError(\n      \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n      [\n        \"Invalid option `record_delimiter`:\",\n        \"value must be a string, a buffer or array of string|buffer,\",\n        `got ${JSON.stringify(options.record_delimiter)}`,\n      ],\n      options,\n    );\n  }\n  options.record_delimiter = options.record_delimiter.map(function (rd, i) {\n    if (typeof rd !== \"string\" && !Buffer.isBuffer(rd)) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a string, a buffer or array of string|buffer\",\n          `at index ${i},`,\n          `got ${JSON.stringify(rd)}`,\n        ],\n        options,\n      );\n    } else if (rd.length === 0) {\n      throw new CsvError(\n        \"CSV_INVALID_OPTION_RECORD_DELIMITER\",\n        [\n          \"Invalid option `record_delimiter`:\",\n          \"value must be a non empty string or buffer\",\n          `at index ${i},`,\n          `got ${JSON.stringify(rd)}`,\n        ],\n        options,\n      );\n    }\n    if (typeof rd === \"string\") {\n      rd = Buffer.from(rd, options.encoding);\n    }\n    return rd;\n  });\n  // Normalize option `relax_column_count`\n  if (typeof options.relax_column_count === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count === undefined ||\n    options.relax_column_count === null\n  ) {\n    options.relax_column_count = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`,\n    );\n  }\n  if (typeof options.relax_column_count_less === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count_less === undefined ||\n    options.relax_column_count_less === null\n  ) {\n    options.relax_column_count_less = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`,\n    );\n  }\n  if (typeof options.relax_column_count_more === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_column_count_more === undefined ||\n    options.relax_column_count_more === null\n  ) {\n    options.relax_column_count_more = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`,\n    );\n  }\n  // Normalize option `relax_quotes`\n  if (typeof options.relax_quotes === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.relax_quotes === undefined ||\n    options.relax_quotes === null\n  ) {\n    options.relax_quotes = false;\n  } else {\n    throw new Error(\n      `Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`,\n    );\n  }\n  // Normalize option `skip_empty_lines`\n  if (typeof options.skip_empty_lines === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_empty_lines === undefined ||\n    options.skip_empty_lines === null\n  ) {\n    options.skip_empty_lines = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`,\n    );\n  }\n  // Normalize option `skip_records_with_empty_values`\n  if (typeof options.skip_records_with_empty_values === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_records_with_empty_values === undefined ||\n    options.skip_records_with_empty_values === null\n  ) {\n    options.skip_records_with_empty_values = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`,\n    );\n  }\n  // Normalize option `skip_records_with_error`\n  if (typeof options.skip_records_with_error === \"boolean\") {\n    // Great, nothing to do\n  } else if (\n    options.skip_records_with_error === undefined ||\n    options.skip_records_with_error === null\n  ) {\n    options.skip_records_with_error = false;\n  } else {\n    throw new Error(\n      `Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`,\n    );\n  }\n  // Normalize option `rtrim`\n  if (\n    options.rtrim === undefined ||\n    options.rtrim === null ||\n    options.rtrim === false\n  ) {\n    options.rtrim = false;\n  } else if (options.rtrim !== true) {\n    throw new Error(\n      `Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`,\n    );\n  }\n  // Normalize option `ltrim`\n  if (\n    options.ltrim === undefined ||\n    options.ltrim === null ||\n    options.ltrim === false\n  ) {\n    options.ltrim = false;\n  } else if (options.ltrim !== true) {\n    throw new Error(\n      `Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`,\n    );\n  }\n  // Normalize option `trim`\n  if (\n    options.trim === undefined ||\n    options.trim === null ||\n    options.trim === false\n  ) {\n    options.trim = false;\n  } else if (options.trim !== true) {\n    throw new Error(\n      `Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`,\n    );\n  }\n  // Normalize options `trim`, `ltrim` and `rtrim`\n  if (options.trim === true && opts.ltrim !== false) {\n    options.ltrim = true;\n  } else if (options.ltrim !== true) {\n    options.ltrim = false;\n  }\n  if (options.trim === true && opts.rtrim !== false) {\n    options.rtrim = true;\n  } else if (options.rtrim !== true) {\n    options.rtrim = false;\n  }\n  // Normalize option `to`\n  if (options.to === undefined || options.to === null) {\n    options.to = -1;\n  } else if (options.to !== -1) {\n    if (typeof options.to === \"string\" && /\\d+/.test(options.to)) {\n      options.to = parseInt(options.to);\n    }\n    if (Number.isInteger(options.to)) {\n      if (options.to <= 0) {\n        throw new Error(\n          `Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`,\n      );\n    }\n  }\n  // Normalize option `to_line`\n  if (options.to_line === undefined || options.to_line === null) {\n    options.to_line = -1;\n  } else if (options.to_line !== -1) {\n    if (typeof options.to_line === \"string\" && /\\d+/.test(options.to_line)) {\n      options.to_line = parseInt(options.to_line);\n    }\n    if (Number.isInteger(options.to_line)) {\n      if (options.to_line <= 0) {\n        throw new Error(\n          `Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`,\n        );\n      }\n    } else {\n      throw new Error(\n        `Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`,\n      );\n    }\n  }\n  return options;\n};\n\nexport { normalize_options };\n","import { normalize_columns_array } from \"./normalize_columns_array.js\";\nimport { init_state } from \"./init_state.js\";\nimport { normalize_options } from \"./normalize_options.js\";\nimport { CsvError } from \"./CsvError.js\";\n\nconst isRecordEmpty = function (record) {\n  return record.every(\n    (field) =>\n      field == null || (field.toString && field.toString().trim() === \"\"),\n  );\n};\n\nconst cr = 13; // `\\r`, carriage return, 0x0D in hexadécimal, 13 in decimal\nconst nl = 10; // `\\n`, newline, 0x0A in hexadecimal, 10 in decimal\n\nconst boms = {\n  // Note, the following are equals:\n  // Buffer.from(\"\\ufeff\")\n  // Buffer.from([239, 187, 191])\n  // Buffer.from('EFBBBF', 'hex')\n  utf8: Buffer.from([239, 187, 191]),\n  // Note, the following are equals:\n  // Buffer.from \"\\ufeff\", 'utf16le\n  // Buffer.from([255, 254])\n  utf16le: Buffer.from([255, 254]),\n};\n\nconst transform = function (original_options = {}) {\n  const info = {\n    bytes: 0,\n    comment_lines: 0,\n    empty_lines: 0,\n    invalid_field_length: 0,\n    lines: 1,\n    records: 0,\n  };\n  const options = normalize_options(original_options);\n  return {\n    info: info,\n    original_options: original_options,\n    options: options,\n    state: init_state(options),\n    __needMoreData: function (i, bufLen, end) {\n      if (end) return false;\n      const { encoding, escape, quote } = this.options;\n      const { quoting, needMoreDataSize, recordDelimiterMaxLength } =\n        this.state;\n      const numOfCharLeft = bufLen - i - 1;\n      const requiredLength = Math.max(\n        needMoreDataSize,\n        // Skip if the remaining buffer smaller than record delimiter\n        // If \"record_delimiter\" is yet to be discovered:\n        // 1. It is equals to `[]` and \"recordDelimiterMaxLength\" equals `0`\n        // 2. We set the length to windows line ending in the current encoding\n        // Note, that encoding is known from user or bom discovery at that point\n        // recordDelimiterMaxLength,\n        recordDelimiterMaxLength === 0\n          ? Buffer.from(\"\\r\\n\", encoding).length\n          : recordDelimiterMaxLength,\n        // Skip if remaining buffer can be an escaped quote\n        quoting ? (escape === null ? 0 : escape.length) + quote.length : 0,\n        // Skip if remaining buffer can be record delimiter following the closing quote\n        quoting ? quote.length + recordDelimiterMaxLength : 0,\n      );\n      return numOfCharLeft < requiredLength;\n    },\n    // Central parser implementation\n    parse: function (nextBuf, end, push, close) {\n      const {\n        bom,\n        comment_no_infix,\n        encoding,\n        from_line,\n        ltrim,\n        max_record_size,\n        raw,\n        relax_quotes,\n        rtrim,\n        skip_empty_lines,\n        to,\n        to_line,\n      } = this.options;\n      let { comment, escape, quote, record_delimiter } = this.options;\n      const { bomSkipped, previousBuf, rawBuffer, escapeIsQuote } = this.state;\n      let buf;\n      if (previousBuf === undefined) {\n        if (nextBuf === undefined) {\n          // Handle empty string\n          close();\n          return;\n        } else {\n          buf = nextBuf;\n        }\n      } else if (previousBuf !== undefined && nextBuf === undefined) {\n        buf = previousBuf;\n      } else {\n        buf = Buffer.concat([previousBuf, nextBuf]);\n      }\n      // Handle UTF BOM\n      if (bomSkipped === false) {\n        if (bom === false) {\n          this.state.bomSkipped = true;\n        } else if (buf.length < 3) {\n          // No enough data\n          if (end === false) {\n            // Wait for more data\n            this.state.previousBuf = buf;\n            return;\n          }\n        } else {\n          for (const encoding in boms) {\n            if (boms[encoding].compare(buf, 0, boms[encoding].length) === 0) {\n              // Skip BOM\n              const bomLength = boms[encoding].length;\n              this.state.bufBytesStart += bomLength;\n              buf = buf.slice(bomLength);\n              // Renormalize original options with the new encoding\n              const options = normalize_options({\n                ...this.original_options,\n                encoding: encoding,\n              });\n              // Properties are merged with the existing options instance\n              for (const key in options) {\n                this.options[key] = options[key];\n              }\n              // Options will re-evaluate the Buffer with the new encoding\n              ({ comment, escape, quote } = this.options);\n              break;\n            }\n          }\n          this.state.bomSkipped = true;\n        }\n      }\n      const bufLen = buf.length;\n      let pos;\n      for (pos = 0; pos < bufLen; pos++) {\n        // Ensure we get enough space to look ahead\n        // There should be a way to move this out of the loop\n        if (this.__needMoreData(pos, bufLen, end)) {\n          break;\n        }\n        if (this.state.wasRowDelimiter === true) {\n          this.info.lines++;\n          this.state.wasRowDelimiter = false;\n        }\n        if (to_line !== -1 && this.info.lines > to_line) {\n          this.state.stop = true;\n          close();\n          return;\n        }\n        // Auto discovery of record_delimiter, unix, mac and windows supported\n        if (this.state.quoting === false && record_delimiter.length === 0) {\n          const record_delimiterCount = this.__autoDiscoverRecordDelimiter(\n            buf,\n            pos,\n          );\n          if (record_delimiterCount) {\n            record_delimiter = this.options.record_delimiter;\n          }\n        }\n        const chr = buf[pos];\n        if (raw === true) {\n          rawBuffer.append(chr);\n        }\n        if (\n          (chr === cr || chr === nl) &&\n          this.state.wasRowDelimiter === false\n        ) {\n          this.state.wasRowDelimiter = true;\n        }\n        // Previous char was a valid escape char\n        // treat the current char as a regular char\n        if (this.state.escaping === true) {\n          this.state.escaping = false;\n        } else {\n          // Escape is only active inside quoted fields\n          // We are quoting, the char is an escape chr and there is a chr to escape\n          // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if (\n            escape !== null &&\n            this.state.quoting === true &&\n            this.__isEscape(buf, pos, chr) &&\n            pos + escape.length < bufLen\n          ) {\n            if (escapeIsQuote) {\n              if (this.__isQuote(buf, pos + escape.length)) {\n                this.state.escaping = true;\n                pos += escape.length - 1;\n                continue;\n              }\n            } else {\n              this.state.escaping = true;\n              pos += escape.length - 1;\n              continue;\n            }\n          }\n          // Not currently escaping and chr is a quote\n          // TODO: need to compare bytes instead of single char\n          if (this.state.commenting === false && this.__isQuote(buf, pos)) {\n            if (this.state.quoting === true) {\n              const nextChr = buf[pos + quote.length];\n              const isNextChrTrimable =\n                rtrim && this.__isCharTrimable(buf, pos + quote.length);\n              const isNextChrComment =\n                comment !== null &&\n                this.__compareBytes(comment, buf, pos + quote.length, nextChr);\n              const isNextChrDelimiter = this.__isDelimiter(\n                buf,\n                pos + quote.length,\n                nextChr,\n              );\n              const isNextChrRecordDelimiter =\n                record_delimiter.length === 0\n                  ? this.__autoDiscoverRecordDelimiter(buf, pos + quote.length)\n                  : this.__isRecordDelimiter(nextChr, buf, pos + quote.length);\n              // Escape a quote\n              // Treat next char as a regular character\n              if (\n                escape !== null &&\n                this.__isEscape(buf, pos, chr) &&\n                this.__isQuote(buf, pos + escape.length)\n              ) {\n                pos += escape.length - 1;\n              } else if (\n                !nextChr ||\n                isNextChrDelimiter ||\n                isNextChrRecordDelimiter ||\n                isNextChrComment ||\n                isNextChrTrimable\n              ) {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                pos += quote.length - 1;\n                continue;\n              } else if (relax_quotes === false) {\n                const err = this.__error(\n                  new CsvError(\n                    \"CSV_INVALID_CLOSING_QUOTE\",\n                    [\n                      \"Invalid Closing Quote:\",\n                      `got \"${String.fromCharCode(nextChr)}\"`,\n                      `at line ${this.info.lines}`,\n                      \"instead of delimiter, record delimiter, trimable character\",\n                      \"(if activated) or comment\",\n                    ],\n                    this.options,\n                    this.__infoField(),\n                  ),\n                );\n                if (err !== undefined) return err;\n              } else {\n                this.state.quoting = false;\n                this.state.wasQuoting = true;\n                this.state.field.prepend(quote);\n                pos += quote.length - 1;\n              }\n            } else {\n              if (this.state.field.length !== 0) {\n                // In relax_quotes mode, treat opening quote preceded by chrs as regular\n                if (relax_quotes === false) {\n                  const info = this.__infoField();\n                  const bom = Object.keys(boms)\n                    .map((b) =>\n                      boms[b].equals(this.state.field.toString()) ? b : false,\n                    )\n                    .filter(Boolean)[0];\n                  const err = this.__error(\n                    new CsvError(\n                      \"INVALID_OPENING_QUOTE\",\n                      [\n                        \"Invalid Opening Quote:\",\n                        `a quote is found on field ${JSON.stringify(info.column)} at line ${info.lines}, value is ${JSON.stringify(this.state.field.toString(encoding))}`,\n                        bom ? `(${bom} bom)` : undefined,\n                      ],\n                      this.options,\n                      info,\n                      {\n                        field: this.state.field,\n                      },\n                    ),\n                  );\n                  if (err !== undefined) return err;\n                }\n              } else {\n                this.state.quoting = true;\n                pos += quote.length - 1;\n                continue;\n              }\n            }\n          }\n          if (this.state.quoting === false) {\n            const recordDelimiterLength = this.__isRecordDelimiter(\n              chr,\n              buf,\n              pos,\n            );\n            if (recordDelimiterLength !== 0) {\n              // Do not emit comments which take a full line\n              const skipCommentLine =\n                this.state.commenting &&\n                this.state.wasQuoting === false &&\n                this.state.record.length === 0 &&\n                this.state.field.length === 0;\n              if (skipCommentLine) {\n                this.info.comment_lines++;\n                // Skip full comment line\n              } else {\n                // Activate records emition if above from_line\n                if (\n                  this.state.enabled === false &&\n                  this.info.lines +\n                    (this.state.wasRowDelimiter === true ? 1 : 0) >=\n                    from_line\n                ) {\n                  this.state.enabled = true;\n                  this.__resetField();\n                  this.__resetRecord();\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n                // Skip if line is empty and skip_empty_lines activated\n                if (\n                  skip_empty_lines === true &&\n                  this.state.wasQuoting === false &&\n                  this.state.record.length === 0 &&\n                  this.state.field.length === 0\n                ) {\n                  this.info.empty_lines++;\n                  pos += recordDelimiterLength - 1;\n                  continue;\n                }\n                this.info.bytes = this.state.bufBytesStart + pos;\n                const errField = this.__onField();\n                if (errField !== undefined) return errField;\n                this.info.bytes =\n                  this.state.bufBytesStart + pos + recordDelimiterLength;\n                const errRecord = this.__onRecord(push);\n                if (errRecord !== undefined) return errRecord;\n                if (to !== -1 && this.info.records >= to) {\n                  this.state.stop = true;\n                  close();\n                  return;\n                }\n              }\n              this.state.commenting = false;\n              pos += recordDelimiterLength - 1;\n              continue;\n            }\n            if (this.state.commenting) {\n              continue;\n            }\n            if (\n              comment !== null &&\n              (comment_no_infix === false ||\n                (this.state.record.length === 0 &&\n                  this.state.field.length === 0))\n            ) {\n              const commentCount = this.__compareBytes(comment, buf, pos, chr);\n              if (commentCount !== 0) {\n                this.state.commenting = true;\n                continue;\n              }\n            }\n            const delimiterLength = this.__isDelimiter(buf, pos, chr);\n            if (delimiterLength !== 0) {\n              this.info.bytes = this.state.bufBytesStart + pos;\n              const errField = this.__onField();\n              if (errField !== undefined) return errField;\n              pos += delimiterLength - 1;\n              continue;\n            }\n          }\n        }\n        if (this.state.commenting === false) {\n          if (\n            max_record_size !== 0 &&\n            this.state.record_length + this.state.field.length > max_record_size\n          ) {\n            return this.__error(\n              new CsvError(\n                \"CSV_MAX_RECORD_SIZE\",\n                [\n                  \"Max Record Size:\",\n                  \"record exceed the maximum number of tolerated bytes\",\n                  `of ${max_record_size}`,\n                  `at line ${this.info.lines}`,\n                ],\n                this.options,\n                this.__infoField(),\n              ),\n            );\n          }\n        }\n        const lappend =\n          ltrim === false ||\n          this.state.quoting === true ||\n          this.state.field.length !== 0 ||\n          !this.__isCharTrimable(buf, pos);\n        // rtrim in non quoting is handle in __onField\n        const rappend = rtrim === false || this.state.wasQuoting === false;\n        if (lappend === true && rappend === true) {\n          this.state.field.append(chr);\n        } else if (rtrim === true && !this.__isCharTrimable(buf, pos)) {\n          return this.__error(\n            new CsvError(\n              \"CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE\",\n              [\n                \"Invalid Closing Quote:\",\n                \"found non trimable byte after quote\",\n                `at line ${this.info.lines}`,\n              ],\n              this.options,\n              this.__infoField(),\n            ),\n          );\n        } else {\n          if (lappend === false) {\n            pos += this.__isCharTrimable(buf, pos) - 1;\n          }\n          continue;\n        }\n      }\n      if (end === true) {\n        // Ensure we are not ending in a quoting state\n        if (this.state.quoting === true) {\n          const err = this.__error(\n            new CsvError(\n              \"CSV_QUOTE_NOT_CLOSED\",\n              [\n                \"Quote Not Closed:\",\n                `the parsing is finished with an opening quote at line ${this.info.lines}`,\n              ],\n              this.options,\n              this.__infoField(),\n            ),\n          );\n          if (err !== undefined) return err;\n        } else {\n          // Skip last line if it has no characters\n          if (\n            this.state.wasQuoting === true ||\n            this.state.record.length !== 0 ||\n            this.state.field.length !== 0\n          ) {\n            this.info.bytes = this.state.bufBytesStart + pos;\n            const errField = this.__onField();\n            if (errField !== undefined) return errField;\n            const errRecord = this.__onRecord(push);\n            if (errRecord !== undefined) return errRecord;\n          } else if (this.state.wasRowDelimiter === true) {\n            this.info.empty_lines++;\n          } else if (this.state.commenting === true) {\n            this.info.comment_lines++;\n          }\n        }\n      } else {\n        this.state.bufBytesStart += pos;\n        this.state.previousBuf = buf.slice(pos);\n      }\n      if (this.state.wasRowDelimiter === true) {\n        this.info.lines++;\n        this.state.wasRowDelimiter = false;\n      }\n    },\n    __onRecord: function (push) {\n      const {\n        columns,\n        group_columns_by_name,\n        encoding,\n        info,\n        from,\n        relax_column_count,\n        relax_column_count_less,\n        relax_column_count_more,\n        raw,\n        skip_records_with_empty_values,\n      } = this.options;\n      const { enabled, record } = this.state;\n      if (enabled === false) {\n        return this.__resetRecord();\n      }\n      // Convert the first line into column names\n      const recordLength = record.length;\n      if (columns === true) {\n        if (skip_records_with_empty_values === true && isRecordEmpty(record)) {\n          this.__resetRecord();\n          return;\n        }\n        return this.__firstLineToColumns(record);\n      }\n      if (columns === false && this.info.records === 0) {\n        this.state.expectedRecordLength = recordLength;\n      }\n      if (recordLength !== this.state.expectedRecordLength) {\n        const err =\n          columns === false\n            ? new CsvError(\n                \"CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\",\n                [\n                  \"Invalid Record Length:\",\n                  `expect ${this.state.expectedRecordLength},`,\n                  `got ${recordLength} on line ${this.info.lines}`,\n                ],\n                this.options,\n                this.__infoField(),\n                {\n                  record: record,\n                },\n              )\n            : new CsvError(\n                \"CSV_RECORD_INCONSISTENT_COLUMNS\",\n                [\n                  \"Invalid Record Length:\",\n                  `columns length is ${columns.length},`, // rename columns\n                  `got ${recordLength} on line ${this.info.lines}`,\n                ],\n                this.options,\n                this.__infoField(),\n                {\n                  record: record,\n                },\n              );\n        if (\n          relax_column_count === true ||\n          (relax_column_count_less === true &&\n            recordLength < this.state.expectedRecordLength) ||\n          (relax_column_count_more === true &&\n            recordLength > this.state.expectedRecordLength)\n        ) {\n          this.info.invalid_field_length++;\n          this.state.error = err;\n          // Error is undefined with skip_records_with_error\n        } else {\n          const finalErr = this.__error(err);\n          if (finalErr) return finalErr;\n        }\n      }\n      if (skip_records_with_empty_values === true && isRecordEmpty(record)) {\n        this.__resetRecord();\n        return;\n      }\n      if (this.state.recordHasError === true) {\n        this.__resetRecord();\n        this.state.recordHasError = false;\n        return;\n      }\n      this.info.records++;\n      if (from === 1 || this.info.records >= from) {\n        const { objname } = this.options;\n        // With columns, records are object\n        if (columns !== false) {\n          const obj = {};\n          // Transform record array to an object\n          for (let i = 0, l = record.length; i < l; i++) {\n            if (columns[i] === undefined || columns[i].disabled) continue;\n            // Turn duplicate columns into an array\n            if (\n              group_columns_by_name === true &&\n              obj[columns[i].name] !== undefined\n            ) {\n              if (Array.isArray(obj[columns[i].name])) {\n                obj[columns[i].name] = obj[columns[i].name].concat(record[i]);\n              } else {\n                obj[columns[i].name] = [obj[columns[i].name], record[i]];\n              }\n            } else {\n              obj[columns[i].name] = record[i];\n            }\n          }\n          // Without objname (default)\n          if (raw === true || info === true) {\n            const extRecord = Object.assign(\n              { record: obj },\n              raw === true\n                ? { raw: this.state.rawBuffer.toString(encoding) }\n                : {},\n              info === true ? { info: this.__infoRecord() } : {},\n            );\n            const err = this.__push(\n              objname === undefined ? extRecord : [obj[objname], extRecord],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          } else {\n            const err = this.__push(\n              objname === undefined ? obj : [obj[objname], obj],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          }\n          // Without columns, records are array\n        } else {\n          if (raw === true || info === true) {\n            const extRecord = Object.assign(\n              { record: record },\n              raw === true\n                ? { raw: this.state.rawBuffer.toString(encoding) }\n                : {},\n              info === true ? { info: this.__infoRecord() } : {},\n            );\n            const err = this.__push(\n              objname === undefined ? extRecord : [record[objname], extRecord],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          } else {\n            const err = this.__push(\n              objname === undefined ? record : [record[objname], record],\n              push,\n            );\n            if (err) {\n              return err;\n            }\n          }\n        }\n      }\n      this.__resetRecord();\n    },\n    __firstLineToColumns: function (record) {\n      const { firstLineToHeaders } = this.state;\n      try {\n        const headers =\n          firstLineToHeaders === undefined\n            ? record\n            : firstLineToHeaders.call(null, record);\n        if (!Array.isArray(headers)) {\n          return this.__error(\n            new CsvError(\n              \"CSV_INVALID_COLUMN_MAPPING\",\n              [\n                \"Invalid Column Mapping:\",\n                \"expect an array from column function,\",\n                `got ${JSON.stringify(headers)}`,\n              ],\n              this.options,\n              this.__infoField(),\n              {\n                headers: headers,\n              },\n            ),\n          );\n        }\n        const normalizedHeaders = normalize_columns_array(headers);\n        this.state.expectedRecordLength = normalizedHeaders.length;\n        this.options.columns = normalizedHeaders;\n        this.__resetRecord();\n        return;\n      } catch (err) {\n        return err;\n      }\n    },\n    __resetRecord: function () {\n      if (this.options.raw === true) {\n        this.state.rawBuffer.reset();\n      }\n      this.state.error = undefined;\n      this.state.record = [];\n      this.state.record_length = 0;\n    },\n    __onField: function () {\n      const { cast, encoding, rtrim, max_record_size } = this.options;\n      const { enabled, wasQuoting } = this.state;\n      // Short circuit for the from_line options\n      if (enabled === false) {\n        return this.__resetField();\n      }\n      let field = this.state.field.toString(encoding);\n      if (rtrim === true && wasQuoting === false) {\n        field = field.trimRight();\n      }\n      if (cast === true) {\n        const [err, f] = this.__cast(field);\n        if (err !== undefined) return err;\n        field = f;\n      }\n      this.state.record.push(field);\n      // Increment record length if record size must not exceed a limit\n      if (max_record_size !== 0 && typeof field === \"string\") {\n        this.state.record_length += field.length;\n      }\n      this.__resetField();\n    },\n    __resetField: function () {\n      this.state.field.reset();\n      this.state.wasQuoting = false;\n    },\n    __push: function (record, push) {\n      const { on_record } = this.options;\n      if (on_record !== undefined) {\n        const info = this.__infoRecord();\n        try {\n          record = on_record.call(null, record, info);\n        } catch (err) {\n          return err;\n        }\n        if (record === undefined || record === null) {\n          return;\n        }\n      }\n      push(record);\n    },\n    // Return a tuple with the error and the casted value\n    __cast: function (field) {\n      const { columns, relax_column_count } = this.options;\n      const isColumns = Array.isArray(columns);\n      // Dont loose time calling cast\n      // because the final record is an object\n      // and this field can't be associated to a key present in columns\n      if (\n        isColumns === true &&\n        relax_column_count &&\n        this.options.columns.length <= this.state.record.length\n      ) {\n        return [undefined, undefined];\n      }\n      if (this.state.castField !== null) {\n        try {\n          const info = this.__infoField();\n          return [undefined, this.state.castField.call(null, field, info)];\n        } catch (err) {\n          return [err];\n        }\n      }\n      if (this.__isFloat(field)) {\n        return [undefined, parseFloat(field)];\n      } else if (this.options.cast_date !== false) {\n        const info = this.__infoField();\n        return [undefined, this.options.cast_date.call(null, field, info)];\n      }\n      return [undefined, field];\n    },\n    // Helper to test if a character is a space or a line delimiter\n    __isCharTrimable: function (buf, pos) {\n      const isTrim = (buf, pos) => {\n        const { timchars } = this.state;\n        loop1: for (let i = 0; i < timchars.length; i++) {\n          const timchar = timchars[i];\n          for (let j = 0; j < timchar.length; j++) {\n            if (timchar[j] !== buf[pos + j]) continue loop1;\n          }\n          return timchar.length;\n        }\n        return 0;\n      };\n      return isTrim(buf, pos);\n    },\n    // Keep it in case we implement the `cast_int` option\n    // __isInt(value){\n    //   // return Number.isInteger(parseInt(value))\n    //   // return !isNaN( parseInt( obj ) );\n    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n    // }\n    __isFloat: function (value) {\n      return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery\n    },\n    __compareBytes: function (sourceBuf, targetBuf, targetPos, firstByte) {\n      if (sourceBuf[0] !== firstByte) return 0;\n      const sourceLength = sourceBuf.length;\n      for (let i = 1; i < sourceLength; i++) {\n        if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;\n      }\n      return sourceLength;\n    },\n    __isDelimiter: function (buf, pos, chr) {\n      const { delimiter, ignore_last_delimiters } = this.options;\n      if (\n        ignore_last_delimiters === true &&\n        this.state.record.length === this.options.columns.length - 1\n      ) {\n        return 0;\n      } else if (\n        ignore_last_delimiters !== false &&\n        typeof ignore_last_delimiters === \"number\" &&\n        this.state.record.length === ignore_last_delimiters - 1\n      ) {\n        return 0;\n      }\n      loop1: for (let i = 0; i < delimiter.length; i++) {\n        const del = delimiter[i];\n        if (del[0] === chr) {\n          for (let j = 1; j < del.length; j++) {\n            if (del[j] !== buf[pos + j]) continue loop1;\n          }\n          return del.length;\n        }\n      }\n      return 0;\n    },\n    __isRecordDelimiter: function (chr, buf, pos) {\n      const { record_delimiter } = this.options;\n      const recordDelimiterLength = record_delimiter.length;\n      loop1: for (let i = 0; i < recordDelimiterLength; i++) {\n        const rd = record_delimiter[i];\n        const rdLength = rd.length;\n        if (rd[0] !== chr) {\n          continue;\n        }\n        for (let j = 1; j < rdLength; j++) {\n          if (rd[j] !== buf[pos + j]) {\n            continue loop1;\n          }\n        }\n        return rd.length;\n      }\n      return 0;\n    },\n    __isEscape: function (buf, pos, chr) {\n      const { escape } = this.options;\n      if (escape === null) return false;\n      const l = escape.length;\n      if (escape[0] === chr) {\n        for (let i = 0; i < l; i++) {\n          if (escape[i] !== buf[pos + i]) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return false;\n    },\n    __isQuote: function (buf, pos) {\n      const { quote } = this.options;\n      if (quote === null) return false;\n      const l = quote.length;\n      for (let i = 0; i < l; i++) {\n        if (quote[i] !== buf[pos + i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    __autoDiscoverRecordDelimiter: function (buf, pos) {\n      const { encoding } = this.options;\n      // Note, we don't need to cache this information in state,\n      // It is only called on the first line until we find out a suitable\n      // record delimiter.\n      const rds = [\n        // Important, the windows line ending must be before mac os 9\n        Buffer.from(\"\\r\\n\", encoding),\n        Buffer.from(\"\\n\", encoding),\n        Buffer.from(\"\\r\", encoding),\n      ];\n      loop: for (let i = 0; i < rds.length; i++) {\n        const l = rds[i].length;\n        for (let j = 0; j < l; j++) {\n          if (rds[i][j] !== buf[pos + j]) {\n            continue loop;\n          }\n        }\n        this.options.record_delimiter.push(rds[i]);\n        this.state.recordDelimiterMaxLength = rds[i].length;\n        return rds[i].length;\n      }\n      return 0;\n    },\n    __error: function (msg) {\n      const { encoding, raw, skip_records_with_error } = this.options;\n      const err = typeof msg === \"string\" ? new Error(msg) : msg;\n      if (skip_records_with_error) {\n        this.state.recordHasError = true;\n        if (this.options.on_skip !== undefined) {\n          try {\n            this.options.on_skip(\n              err,\n              raw ? this.state.rawBuffer.toString(encoding) : undefined,\n            );\n          } catch (err) {\n            return err;\n          }\n        }\n        // this.emit('skip', err, raw ? this.state.rawBuffer.toString(encoding) : undefined);\n        return undefined;\n      } else {\n        return err;\n      }\n    },\n    __infoDataSet: function () {\n      return {\n        ...this.info,\n        columns: this.options.columns,\n      };\n    },\n    __infoRecord: function () {\n      const { columns, raw, encoding } = this.options;\n      return {\n        ...this.__infoDataSet(),\n        error: this.state.error,\n        header: columns === true,\n        index: this.state.record.length,\n        raw: raw ? this.state.rawBuffer.toString(encoding) : undefined,\n      };\n    },\n    __infoField: function () {\n      const { columns } = this.options;\n      const isColumns = Array.isArray(columns);\n      return {\n        ...this.__infoRecord(),\n        column:\n          isColumns === true\n            ? columns.length > this.state.record.length\n              ? columns[this.state.record.length].name\n              : null\n            : this.state.record.length,\n        quoting: this.state.wasQuoting,\n      };\n    },\n  };\n};\n\nexport { transform, CsvError };\n","import { CsvError, transform } from \"./api/index.js\";\n\nconst parse = function (data, opts = {}) {\n  if (typeof data === \"string\") {\n    data = Buffer.from(data);\n  }\n  const records = opts && opts.objname ? {} : [];\n  const parser = transform(opts);\n  const push = (record) => {\n    if (parser.options.objname === undefined) records.push(record);\n    else {\n      records[record[0]] = record[1];\n    }\n  };\n  const close = () => {};\n  const error = parser.parse(data, true, push, close);\n  if (error !== undefined) throw error;\n  // 250606: `parser.parse` was implemented as 2 calls:\n  // const err1 = parser.parse(data, false, push, close);\n  // if (err1 !== undefined) throw err1;\n  // const err2 = parser.parse(undefined, true, push, close);\n  // if (err2 !== undefined) throw err2;\n  return records;\n};\n\n// export default parse\nexport { parse };\nexport { CsvError };\n","import { parse } from 'csv-parse/sync';\nimport { Transaction } from '../models/transaction.js';\n\nexport class BanorteParser {\n    /**\n     * Parses the entire Banorte pipe-delimited file content into an array of Transactions.\n     *\n     * @param {string} fileContent - The full text content of the Banorte file.\n     * @returns {Transaction[]} Array of parsed Transaction objects.\n     */\n    parse(fileContent) {\n        const records = parse(fileContent, {\n            delimiter: '|',\n            columns: true,\n            skip_empty_lines: true,\n            trim: true,\n            relax_column_count: true,\n        });\n\n        return records\n            .map(record => this.parseRecord(record))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single Banorte transaction record object into a Transaction instance.\n     *\n     * @param {Object} record - Parsed CSV record object with keys from header.\n     * @param {string} record.Cuenta - Account number.\n     * @param {string} record['Fecha De Operación'] - Transaction date (DD/MM/YYYY).\n     * @param {string} record.Referencia - Reference code.\n     * @param {string} record.Descripción - Description of transaction.\n     * @param {string} record.Depósitos - Deposits amount (currency formatted).\n     * @param {string} record.Retiros - Withdrawals amount (currency formatted).\n     * @param {string} record.Saldo - Balance after transaction (currency formatted).\n     * @returns {Transaction|null} Transaction instance or null if required fields missing.\n     */\n    parseRecord(record) {\n        const {\n            Cuenta: account,\n            'Fecha De Operación': dateStr,\n            Referencia: reference,\n            Descripción: description,\n            Depósitos: depositsStr,\n            Retiros: withdrawalsStr,\n            Saldo: balanceStr,\n        } = record;\n\n        if (!account || !dateStr) return null;\n\n        const date = this._formatDate(dateStr);\n        const deposits = this._parseMoney(depositsStr);\n        const withdrawals = this._parseMoney(withdrawalsStr);\n        const balance = this._parseMoney(balanceStr);\n        const amount = deposits !== 0 ? deposits : -withdrawals;\n\n        return new Transaction({\n            date,\n            type: deposits !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference,\n            account,\n            description,\n            bank: 'Banorte',\n            raw: JSON.stringify(record),\n        });\n    }\n\n    /**\n     * Parses a currency string (e.g. \"$13,295.61\") into a float number.\n     *\n     * @param {string} str - Currency formatted string.\n     * @returns {number} Parsed numeric value or 0 if invalid.\n     */\n    _parseMoney(str) {\n        if (!str) return 0;\n        return parseFloat(str.replace(/[$,]/g, '')) || 0;\n    }\n\n    /**\n     * Converts a date string from DD/MM/YYYY format to ISO YYYY-MM-DD.\n     *\n     * @param {string} input - Date string in DD/MM/YYYY format.\n     * @returns {string} Reformatted date string in YYYY-MM-DD format.\n     */\n    _formatDate(input) {\n        const [day, month, year] = input.split('/');\n        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class BbvaParser {\n    /**\n     * Parses the full BBVA TXT content.\n     *\n     * @param {string} fileContent\n     * @returns {Transaction[]}\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split(/\\r?\\n/)\n            .map(line => line.trim())\n            .filter(line => this._looksLikeTransaction(line));\n\n        return lines\n            .map(line => this.parseLine(line))\n            .filter(Boolean);\n    }\n\n    /**\n     * Parses a single transaction line.\n     *\n     * @param {string} line\n     * @returns {Transaction|null}\n     */\n    parseLine(line) {\n        const regex = /^(\\d{2}-\\d{2}-\\d{4})\\s+(.+?)\\s+([\\d,]+\\.\\d{2})?\\s*([\\d,]+\\.\\d{2})?\\s+([\\d,]+\\.\\d{2})$/;\n        const match = line.match(regex);\n\n        if (!match) return null;\n\n        const [, dateStr, description, debitStr, creditStr, balanceStr] = match;\n\n        const date = this._formatDate(dateStr);\n        const debit = this._parseNumber(debitStr);\n        const credit = this._parseNumber(creditStr);\n        const balance = this._parseNumber(balanceStr);\n        const amount = credit !== 0 ? credit : -debit;\n\n        return new Transaction({\n            date,\n            type: credit !== 0 ? 'credit' : 'debit',\n            amount,\n            balance,\n            reference: '',\n            account: '',\n            description: description.trim(),\n            bank: 'BBVA',\n            raw: line,\n        });\n    }\n\n    /**\n     * Filters out headers and irrelevant lines.\n     *\n     * @param {string} line\n     * @returns {boolean}\n     */\n    _looksLikeTransaction(line) {\n        return /^\\d{2}-\\d{2}-\\d{4}/.test(line);\n    }\n\n    /**\n     * Parses number with commas as thousands separator.\n     *\n     * @param {string} str\n     * @returns {number}\n     */\n    _parseNumber(str) {\n        if (!str) return 0;\n        return parseFloat(str.replace(/,/g, ''));\n    }\n\n    /**\n     * Converts DD-MM-YYYY to YYYY-MM-DD.\n     *\n     * @param {string} input\n     * @returns {string}\n     */\n    _formatDate(input) {\n        const [day, month, year] = input.split('-');\n        return `${year}-${month}-${day}`;\n    }\n}\n","import { Transaction } from '../models/transaction.js';\n\nexport class ScotiabankParser {\n    /**\n     * Parses a Scotiabank TXT file content into a list of transactions.\n     *\n     * @param {string} fileContent\n     * @returns {Transaction[]}\n     */\n    parse(fileContent) {\n        const lines = fileContent\n            .split('\\n')\n            .map(line => line.trim())\n            .filter(line => line.length > 100);\n\n        const transactions = [];\n\n        for (const line of lines) {\n            const accountType = line.substring(0, 3);\n            const currency = line.substring(3, 6);\n            const rawAccountNumber = line.substring(6, 26);\n            const accountNumber = rawAccountNumber.replace(/^0+/, ''); // Strip leading zeros\n            const date = line.substring(28, 36);\n\n            transactions.push(new Transaction({\n                date,\n                type: accountType,\n                currency,\n                reference: null,\n                accountNumber,\n                description: '',\n                amount: 0,\n                balance: 0,\n                bank: 'Scotiabank',\n                trackingKey: '',\n                beneficiary: '',\n                extra: line,\n            }));\n        }\n\n        return transactions;\n    }\n}\n","import { AfirmeParser } from './parsers/afirme-parser.js';\nimport { BanBajioParser } from './parsers/banbajio-parser.js';\nimport { BanorteParser } from './parsers/banorte-parser.js';\nimport { BbvaParser } from './parsers/bbva-parser.js';\nimport { ScotiabankParser } from './parsers/scotiabank-parser.js';\n\n/**\n * Returns the appropriate parser instance for a given bank name.\n *\n * @param {string} bankName - Name of the bank (case-insensitive)\n * @returns {BaseParser} Instance of a parser for the specified bank\n * @throws {Error} If no parser is available for the given bank\n */\nexport function getParserForBank(bankName) {\n    switch (bankName.toLowerCase()) {\n        case 'afirme':\n            return new AfirmeParser();\n        case 'banbajio':\n            return new BanBajioParser();\n        case 'banorte':\n            return new BanorteParser();\n        case 'bbva':\n            return new BbvaParser();\n        case 'scotiabank':\n            return new ScotiabankParser();\n        default:\n            throw new Error(`No parser available for bank: ${bankName}`);\n    }\n}"],"names":["cr","nl"],"mappings":"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","x_google_ignoreList":[3,4,5,6,7,8,9,10,11]}